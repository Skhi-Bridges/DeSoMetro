import { KeyPair, Network, jwtAlgorithm } from './types.js';
export declare function concatUint8Arrays(arrays: Uint8Array[], length?: number): Uint8Array;
export declare const uvarint64ToBuf: (uint: number) => Uint8Array;
export declare const bufToUvarint64: (buffer: Uint8Array) => [number, Uint8Array];
export declare const uint64ToBufBigEndian: (uint: number) => Uint8Array;
interface Base58CheckOptions {
    network: Network;
}
export declare const keygen: (seed?: string | Uint8Array) => KeyPair;
/**
 *
 * @param data could be a hex string or a byte array (Uint8Array)
 * @returns
 */
export declare const sha256X2: (data: Uint8Array | string) => Uint8Array;
export declare const publicKeyToBase58Check: (publicKeyBytes: Uint8Array, options?: Base58CheckOptions) => string;
export interface SignOptions {
    isDerivedKey: boolean;
}
export declare const sign: (msgHashHex: string, privateKey: Uint8Array) => Promise<[Uint8Array, number]>;
export declare const signTx: (txHex: string, seedHex: string, options?: SignOptions) => Promise<string>;
export declare const getSignedJWT: (seedHex: string, alg: jwtAlgorithm, { derivedPublicKeyBase58Check, expiration, }: {
    derivedPublicKeyBase58Check?: string | undefined;
    expiration?: number | undefined;
}) => Promise<string>;
export declare const encryptChatMessage: (senderSeedHex: string, recipientPublicKeyBase58Check: string, message: string) => Promise<string>;
/**
 * @param publicEncryptionKey could be in raw bytes or base58check format
 * @param plaintext
 * @returns cipher text as a hex string
 */
export declare const encrypt: (publicKey: Uint8Array | string, plaintext: string) => Promise<string>;
export declare const bs58PublicKeyToCompressedBytes: (str: string) => Uint8Array;
export declare const bs58PublicKeyToBytes: (str: string) => Uint8Array;
export declare const isValidBS58PublicKey: (publicKey: string, isTestnet?: boolean) => boolean;
export declare const decryptChatMessage: (recipientSeedHex: string, publicDecryptionKey: string, cipherTextHex: string) => Promise<string>;
export declare const decrypt: (privateDecryptionKey: Uint8Array | string, cipherTextHex: string) => Promise<string>;
export declare const getSharedPrivateKey: (privKey: Uint8Array, pubKey: Uint8Array) => Uint8Array;
export declare const decodePublicKey: (publicKeyBase58Check: string) => Promise<Uint8Array>;
export declare const getSharedSecret: (privKey: Uint8Array, pubKey: Uint8Array) => Uint8Array;
export declare const kdf: (secret: Uint8Array, outputLength: number) => Uint8Array;
export declare function deriveAccessGroupKeyPair(privateKeyHex: string, groupKeyName: string): KeyPair;
export {};
