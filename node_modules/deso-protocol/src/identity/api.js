function buildOptions(customOptions = {}) {
    const headers = customOptions.headers ?? {};
    delete customOptions.headers;
    return {
        headers,
        ...customOptions,
    };
}
export class APIError {
    constructor(message, status) {
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = message;
        this.status = status;
    }
    toString() {
        return this.message;
    }
}
const wrappedFetch = (url, options) => {
    return fetch(url, options).then((res) => {
        if (!res.ok) {
            return res.json().then((json) => {
                throw new APIError(json.error, res.status);
            });
        }
        return res.text().then((rawBodyText) => {
            if (rawBodyText.length === 0) {
                // In the case where the response body is empty, it will fail to parse
                // as JSON so we just handle it as a special case.
                return null;
            }
            else {
                return JSON.parse(rawBodyText);
            }
        });
    });
};
export const api = {
    post(url, data) {
        return wrappedFetch(url, buildOptions({
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
            },
        }));
    },
    get(url) {
        return wrappedFetch(url, buildOptions({ method: 'GET' }));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lkZW50aXR5L2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLFlBQVksQ0FBQyxnQkFBcUIsRUFBRTtJQUMzQyxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUM1QyxPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFFN0IsT0FBTztRQUNMLE9BQU87UUFDUCxHQUFHLGFBQWE7S0FDakIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLE9BQU8sUUFBUTtJQUluQixZQUFZLE9BQWUsRUFBRSxNQUFjO1FBSDNDOzs7OztXQUFnQjtRQUNoQjs7Ozs7V0FBZTtRQUdiLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Q0FDRjtBQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsR0FBVyxFQUFFLE9BQVksRUFBRSxFQUFFO0lBQ2pELE9BQU8sS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtZQUNYLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM5QixNQUFNLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUNyQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM1QixzRUFBc0U7Z0JBQ3RFLGtEQUFrRDtnQkFDbEQsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDaEM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFnQjtJQUM5QixJQUFJLENBQUMsR0FBVyxFQUFFLElBQXlCO1FBQ3pDLE9BQU8sWUFBWSxDQUNqQixHQUFHLEVBQ0gsWUFBWSxDQUFDO1lBQ1gsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFO2dCQUNQLGNBQWMsRUFBRSxrQkFBa0I7YUFDbkM7U0FDRixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFDRCxHQUFHLENBQUMsR0FBVztRQUNiLE9BQU8sWUFBWSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJUHJvdmlkZXIgfSBmcm9tICcuL3R5cGVzLmpzJztcblxuZnVuY3Rpb24gYnVpbGRPcHRpb25zKGN1c3RvbU9wdGlvbnM6IGFueSA9IHt9KSB7XG4gIGNvbnN0IGhlYWRlcnMgPSBjdXN0b21PcHRpb25zLmhlYWRlcnMgPz8ge307XG4gIGRlbGV0ZSBjdXN0b21PcHRpb25zLmhlYWRlcnM7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXJzLFxuICAgIC4uLmN1c3RvbU9wdGlvbnMsXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBBUElFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgc3RhdHVzOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlcikge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICB9XG59XG5cbmNvbnN0IHdyYXBwZWRGZXRjaCA9ICh1cmw6IHN0cmluZywgb3B0aW9uczogYW55KSA9PiB7XG4gIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpLnRoZW4oKHJlcykgPT4ge1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICByZXR1cm4gcmVzLmpzb24oKS50aGVuKChqc29uKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBUElFcnJvcihqc29uLmVycm9yLCByZXMuc3RhdHVzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMudGV4dCgpLnRoZW4oKHJhd0JvZHlUZXh0KSA9PiB7XG4gICAgICBpZiAocmF3Qm9keVRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIEluIHRoZSBjYXNlIHdoZXJlIHRoZSByZXNwb25zZSBib2R5IGlzIGVtcHR5LCBpdCB3aWxsIGZhaWwgdG8gcGFyc2VcbiAgICAgICAgLy8gYXMgSlNPTiBzbyB3ZSBqdXN0IGhhbmRsZSBpdCBhcyBhIHNwZWNpYWwgY2FzZS5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyYXdCb2R5VGV4dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwaTogQVBJUHJvdmlkZXIgPSB7XG4gIHBvc3QodXJsOiBzdHJpbmcsIGRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB3cmFwcGVkRmV0Y2goXG4gICAgICB1cmwsXG4gICAgICBidWlsZE9wdGlvbnMoe1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuICB9LFxuICBnZXQodXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB3cmFwcGVkRmV0Y2godXJsLCBidWlsZE9wdGlvbnMoeyBtZXRob2Q6ICdHRVQnIH0pKTtcbiAgfSxcbn07XG4iXX0=