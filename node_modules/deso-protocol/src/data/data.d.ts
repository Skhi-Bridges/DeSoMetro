import { AccessGroupEntryResponse, AccessGroupMemberEntryResponse, APIBlockRequest, APIBlockResponse, APITransactionInfoRequest, APITransactionInfoResponse, AssociationCountsResponse, AssociationResponse, AssociationsCountResponse, CheckPartyAccessGroupsRequest, CheckPartyAccessGroupsResponse, GetAccessGroupInfoRequest, GetAccessGroupMemberRequest, GetAccessGroupsRequest, GetAccessGroupsResponse, GetAllMessagingGroupKeysRequest, GetAppStateRequest, GetAppStateResponse, GetBlockTemplateRequest, GetBlockTemplateResponse, GetBulkAccessGroupEntriesRequest, GetBulkAccessGroupEntriesResponse, GetDiamondsForPostRequest, GetDiamondsForPostResponse, GetDiamondsForPublicKeyRequest, GetDiamondsForPublicKeyResponse, GetExchangeRateResponse, GetFollowsResponse, GetFollowsStatelessRequest, GetFullTikTokURLRequest, GetFullTikTokURLResponse, GetGlobalParamsResponse, GetHodlersForPublicKeyRequest, GetHodlersForPublicKeyResponse, GetLikesForPostRequest, GetLikesForPostResponse, GetNextNFTShowcaseResponse, GetNFTBidsForNFTPostRequest, GetNFTBidsForNFTPostResponse, GetNFTBidsForUserRequest, GetNFTBidsForUserResponse, GetNFTCollectionSummaryRequest, GetNFTCollectionSummaryResponse, GetNFTEntriesForPostHashRequest, GetNFTEntriesForPostHashResponse, GetNFTsForUserRequest, GetNFTsForUserResponse, GetNFTShowcaseRequest, GetNFTShowcaseResponse, GetNotificationsCountRequest, GetNotificationsRequest, GetNotificationsResponse, GetPaginatedAccessGroupMembersRequest, GetPaginatedAccessGroupMembersResponse, GetPaginatedMessagesForDmThreadRequest, GetPaginatedMessagesForDmThreadResponse, GetPaginatedMessagesForGroupChatThreadRequest, GetPaginatedMessagesForGroupChatThreadResponse, GetPostsDiamondedBySenderForReceiverRequest, GetPostsForPublicKeyRequest, GetPostsForPublicKeyResponse, GetPostsHashHexListRequest, GetPostsHashHexListResponse, GetPostsStatelessRequest, GetPostsStatelessResponse, GetProfilesRequest, GetProfilesResponse, GetQuoteRepostsForPostRequest, GetQuoteRepostsForPostResponse, GetRepostsForPostRequest, GetRepostsForPostResponse, GetSinglePostRequest, GetSinglePostResponse, GetSingleProfileRequest, GetSingleProfileResponse, GetTransactionSpendingLimitHexStringRequest, GetTransactionSpendingLimitHexStringResponse, GetTxnRequest, GetTxnResponse, GetUserDerivedKeysRequest, GetUserDerivedKeysResponse, GetUserMessageThreadsRequest, GetUserMessageThreadsResponse, GetUserMetadataRequest, GetUserMetadataResponse, GetUsersResponse, GetUsersStatelessRequest, HotFeedPageRequest, HotFeedPageResponse, IsFolllowingPublicKeyResponse, IsFollowingPublicKeyRequest, IsHodlingPublicKeyRequest, IsHodlingPublicKeyResponse, PostAssociationQuery, PostAssociationsResponse, RegisterMessagingGroupKeyRequest, RegisterMessagingGroupKeyResponse, RequestOptions, SubmitBlockRequest, SubmitBlockResponse, TransactionSpendingLimitResponse, UserAssociationQuery, UserAssociationsResponse } from '../backend-types/index.js';
/**
 * Returns a type that requires the given keys to be present in the partial.
 *
 * @example The PostsHashHexList field is required, but all other fields of the
 * interface GetPostsHashHexListRequest are optional:
 *    const params: PartialWithRequiredFields<GetPostsHashHexListRequest, 'PostsHashHexList'> = { ... }
 *
 * @example To list multiple required fields, use a union:
 *    PartialWithRequiredFields<SomeType, 'requiredFieldA' | 'requiredFieldB'>
 */
export type PartialWithRequiredFields<T, K extends keyof T> = Partial<T> & Pick<T, K>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-posts-stateless
 */
export type GetPostsStatelessParams = Partial<GetPostsStatelessRequest>;
export declare const getPostsStateless: (params: GetPostsStatelessParams, options?: RequestOptions) => Promise<GetPostsStatelessResponse>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-single-post
 */
export type GetSinglePostParams = PartialWithRequiredFields<GetSinglePostRequest, 'PostHashHex'>;
export declare const getSinglePost: (params: GetSinglePostParams, options?: RequestOptions) => Promise<GetSinglePostResponse>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-posts-for-public-key
 */
export type GetPostsForUserParams = PartialWithRequiredFields<GetPostsForPublicKeyRequest, 'PublicKeyBase58Check' | 'NumToFetch'> | PartialWithRequiredFields<GetPostsForPublicKeyRequest, 'Username' | 'NumToFetch'>;
export declare const getPostsForUser: (params: GetPostsForUserParams, options?: RequestOptions) => Promise<GetPostsForPublicKeyResponse>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-hot-feed
 */
export type GetHotFeedParams = Partial<HotFeedPageRequest>;
export declare const getHotFeed: (params: GetHotFeedParams, options?: RequestOptions) => Promise<HotFeedPageResponse>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-diamonded-posts
 */
export type GetDiamondedPostsParams = PartialWithRequiredFields<GetPostsDiamondedBySenderForReceiverRequest, 'SenderPublicKeyBase58Check' | 'ReceiverPublicKeyBase58Check' | 'NumToFetch'> | PartialWithRequiredFields<GetPostsDiamondedBySenderForReceiverRequest, 'SenderUsername' | 'ReceiverUsername' | 'NumToFetch'>;
export declare const getDiamondedPosts: (params: GetDiamondedPostsParams, options?: RequestOptions) => Promise<any>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-likes-for-post
 */
export type GetLikesForPostParams = PartialWithRequiredFields<GetLikesForPostRequest, 'PostHashHex' | 'Limit' | 'Offset'>;
export declare const getLikesForPost: (params: GetLikesForPostParams, options?: RequestOptions) => Promise<GetLikesForPostResponse>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-diamonds-for-post
 */
export type GetDiamondsForPostParams = PartialWithRequiredFields<GetDiamondsForPostRequest, 'PostHashHex' | 'Limit' | 'Offset'>;
export declare const getDiamondsForPost: (params: GetDiamondsForPostParams, options?: RequestOptions) => Promise<GetDiamondsForPostResponse>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-reposts-for-post
 */
export type GetRepostsForPostParams = PartialWithRequiredFields<GetRepostsForPostRequest, 'PostHashHex' | 'Limit' | 'Offset'>;
export declare const getRepostsForPost: (params: GetRepostsForPostParams, options?: RequestOptions) => Promise<GetRepostsForPostResponse>;
/**
 * https://docs.deso.org/deso-backend/api/post-endpoints#get-quote-reposts-for-post
 */
type GetQuoteRepostsForPostParams = PartialWithRequiredFields<GetQuoteRepostsForPostRequest, 'PostHashHex' | 'Limit' | 'Offset'>;
export declare const getQuoteRepostsForPost: (params: GetQuoteRepostsForPostParams, options?: RequestOptions) => Promise<GetQuoteRepostsForPostResponse>;
type GetPostsHashHexListParams = PartialWithRequiredFields<GetPostsHashHexListRequest, 'PostsHashHexList'>;
export declare const getPostsHashHexList: (params: GetPostsHashHexListParams, options?: RequestOptions) => Promise<GetPostsHashHexListResponse>;
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-users-stateless
 */
export type GetUsersStatelessParams = PartialWithRequiredFields<GetUsersStatelessRequest, 'PublicKeysBase58Check'>;
export declare const getUsersStateless: (params: GetUsersStatelessParams, options?: RequestOptions) => Promise<GetUsersResponse>;
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-single-profile-picture
 */
export declare const buildProfilePictureUrl: (PublicKeyBase58Check: string, options?: {
    fallbackImageUrl?: string;
} & RequestOptions) => string;
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-single-profile
 */
export type GetSingleProfileParams = PartialWithRequiredFields<GetSingleProfileRequest, 'PublicKeyBase58Check'> | PartialWithRequiredFields<GetSingleProfileRequest, 'Username'>;
export declare const getSingleProfile: (params: GetSingleProfileParams, options?: RequestOptions) => Promise<GetSingleProfileResponse>;
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-profiles
 */
export type GetProfilesParams = Partial<GetProfilesRequest>;
export declare const getProfiles: (params: GetProfilesRequest, options?: RequestOptions) => Promise<GetProfilesResponse>;
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-metadata
 */
export declare const getUserMetadata: (params: GetUserMetadataRequest, options?: RequestOptions) => Promise<GetUserMetadataResponse>;
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-derived-keys
 */
export declare const getUserDerivedKeys: (params: GetUserDerivedKeysRequest, options?: RequestOptions) => Promise<GetUserDerivedKeysResponse>;
export declare const getAllMessagingGroupKeys: (params: GetAllMessagingGroupKeysRequest, options?: RequestOptions) => Promise<RegisterMessagingGroupKeyResponse>;
export type RegisterMessagingGroupKeyParams = PartialWithRequiredFields<RegisterMessagingGroupKeyRequest, 'OwnerPublicKeyBase58Check' | 'MessagingGroupKeyName' | 'MessagingKeySignatureHex' | 'MessagingPublicKeyBase58Check' | 'MinFeeRateNanosPerKB'>;
export declare const registerMessagingGroupKey: (params: RegisterMessagingGroupKeyParams, options?: RequestOptions) => Promise<RegisterMessagingGroupKeyResponse>;
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-all-user-message-threads
 */
export declare const getAllMessageThreads: (params: GetUserMessageThreadsRequest, options?: RequestOptions) => Promise<GetUserMessageThreadsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-paginated-messages-for-group-chat-thread
 */
export type GetPaginatedMessagesForGroupThreadParams = PartialWithRequiredFields<GetPaginatedMessagesForGroupChatThreadRequest, 'UserPublicKeyBase58Check' | 'AccessGroupKeyName' | 'MaxMessagesToFetch' | 'StartTimeStamp'> | PartialWithRequiredFields<GetPaginatedMessagesForGroupChatThreadRequest, 'UserPublicKeyBase58Check' | 'AccessGroupKeyName' | 'MaxMessagesToFetch' | 'StartTimeStampString'>;
export declare const getPaginatedGroupChatThread: (params: GetPaginatedMessagesForGroupThreadParams, options?: RequestOptions) => Promise<GetPaginatedMessagesForGroupChatThreadResponse>;
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-paginated-messages-for-a-direct-message-thread
 */
export type GetPaginatedMessagesForDMThreadParams = PartialWithRequiredFields<GetPaginatedMessagesForDmThreadRequest, 'UserGroupOwnerPublicKeyBase58Check' | 'UserGroupKeyName' | 'PartyGroupOwnerPublicKeyBase58Check' | 'PartyGroupKeyName' | 'MaxMessagesToFetch' | 'StartTimeStamp'> | PartialWithRequiredFields<GetPaginatedMessagesForDmThreadRequest, 'UserGroupOwnerPublicKeyBase58Check' | 'UserGroupKeyName' | 'PartyGroupOwnerPublicKeyBase58Check' | 'PartyGroupKeyName' | 'MaxMessagesToFetch' | 'StartTimeStampString'>;
export declare const getPaginatedDMThread: (params: GetPaginatedMessagesForDMThreadParams, options?: RequestOptions) => Promise<GetPaginatedMessagesForDmThreadResponse>;
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-user-group-chat-threads-ordered-by-timestamp
 */
export declare const getGroupChatThreads: (params: GetUserMessageThreadsRequest, options?: RequestOptions) => Promise<GetUserMessageThreadsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-user-direct-message-threads-ordered-by-timestamp
 */
export declare const getDMThreads: (params: GetUserMessageThreadsRequest, options?: RequestOptions) => Promise<GetUserMessageThreadsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-user-access-groups
 */
export declare const getAllAccessGroups: (params: GetAccessGroupsRequest, options?: RequestOptions) => Promise<GetAccessGroupsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-access-groups-owned
 */
export declare const getAllAccessGroupsOwned: (params: GetAccessGroupsRequest, options?: RequestOptions) => Promise<GetAccessGroupsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-access-groups-owned
 */
export declare const getAllAccessGroupsMemberOnly: (params: GetAccessGroupsRequest, options?: RequestOptions) => Promise<GetAccessGroupsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#check-party-access-groups
 */
export declare const checkPartyAccessGroups: (params: CheckPartyAccessGroupsRequest, options?: RequestOptions) => Promise<CheckPartyAccessGroupsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-access-group-information
 */
export declare const getAccessGroupInfo: (params: GetAccessGroupInfoRequest, options?: RequestOptions) => Promise<AccessGroupEntryResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-access-group-member-information
 */
export declare const getAccessGroupMemberInfo: (params: GetAccessGroupMemberRequest, options?: RequestOptions) => Promise<AccessGroupMemberEntryResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-paginated-access-group-members
 */
export declare const getPaginatedAccessGroupMembers: (params: PartialWithRequiredFields<GetPaginatedAccessGroupMembersRequest, 'AccessGroupKeyName' | 'MaxMembersToFetch' | 'AccessGroupOwnerPublicKeyBase58Check'>, options?: RequestOptions) => Promise<GetPaginatedAccessGroupMembersResponse>;
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-bulk-access-group-entries
 */
export declare const getBulkAccessGroups: (params: GetBulkAccessGroupEntriesRequest, options?: RequestOptions) => Promise<GetBulkAccessGroupEntriesResponse>;
export declare const getTransaction: (params: GetTxnRequest, options?: RequestOptions) => Promise<GetTxnResponse>;
/**
 * Waits for a transaction to be found in the mempool. If it is found before the
 * timeout, it resolves immediately. If it is not found before the timeout, it
 * rejects. Useful for sequencing transactions that depend on other
 * transactions.
 *
 * @param TxnHashHex - hex encoded transaction we are looking for in the mempool
 * @param options - options object
 * @param options.timeout - timeout in milliseconds, we'll wait 1 minute before
 * throwing an error by default.
 */
export declare const waitForTransactionFound: (TxnHashHex: string, { timeout }?: {
    timeout?: number | undefined;
}) => Promise<void>;
/**
 * https://docs.deso.org/deso-backend/api/backend-api#health-check
 */
export declare const healthCheck: (options?: RequestOptions) => Promise<void>;
/**
 * https://docs.deso.org/deso-backend/api/backend-api#get-exchange-rate
 */
export declare const getExchangeRates: (options?: RequestOptions) => Promise<GetExchangeRateResponse>;
/**
 */
export declare const getPublicKeyForUsername: (username: string, options?: RequestOptions) => Promise<string>;
/**
 */
export declare const getUsernameForPublicKey: (publicKey: string, options?: RequestOptions) => Promise<string>;
export type APITransactionInfoParams = PartialWithRequiredFields<APITransactionInfoRequest, 'TransactionIDBase58Check'> | PartialWithRequiredFields<APITransactionInfoRequest, 'PublicKeyBase58Check'>;
export declare const getTransactionInfo: (params?: Partial<APITransactionInfoParams>, options?: RequestOptions) => Promise<APITransactionInfoResponse>;
export type APIBlockParams = PartialWithRequiredFields<APIBlockRequest, 'Height'> | PartialWithRequiredFields<APIBlockRequest, 'HashHex'>;
export declare const getBlock: (params: APIBlockParams, options?: RequestOptions) => Promise<APIBlockResponse>;
/**
 * https://docs.deso.org/deso-backend/api/backend-api#get-app-state
 */
export declare const getAppState: (params?: Partial<GetAppStateRequest>, options?: RequestOptions) => Promise<GetAppStateResponse>;
export declare const getGlobalParams: (options?: RequestOptions) => Promise<GetGlobalParamsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/transaction-spending-limits-endpoints#get-transaction-spending-limit-response-from-hex
 */
export declare const getTransactionSpendingLimitFromHex: (hex: string, options?: RequestOptions) => Promise<TransactionSpendingLimitResponse>;
/**
 * https://docs.deso.org/deso-backend/api/transaction-spending-limits-endpoints#get-transaction-spending-limit-hex-string
 */
export declare const getTransactionSpendingLimitHex: (params: GetTransactionSpendingLimitHexStringRequest, options?: RequestOptions) => Promise<GetTransactionSpendingLimitHexStringResponse>;
/**
 * https://docs.deso.org/deso-backend/api/notification-endpoints#get-notifications
 */
export declare const getNotifications: (params: PartialWithRequiredFields<GetNotificationsRequest, 'PublicKeyBase58Check' | 'NumToFetch'>, options?: RequestOptions) => Promise<GetNotificationsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/notification-endpoints#get-unread-notification-count
 */
export declare const getUnreadNotificationsCount: (params: GetNotificationsCountRequest, options?: RequestOptions) => Promise<GetNotificationsCountRequest>;
/**
 * https://docs.deso.org/deso-backend/api/miner-endpoints#get-block-template
 */
export declare const getBlockTemplate: (params: GetBlockTemplateRequest, options?: RequestOptions) => Promise<GetBlockTemplateResponse>;
/**
 * https://docs.deso.org/deso-backend/api/miner-endpoints#submit-block
 */
export declare const submitBlock: (params: SubmitBlockRequest, options?: RequestOptions) => Promise<SubmitBlockResponse>;
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nfts-for-user
 */
export declare const getNFTsForUser: (params: PartialWithRequiredFields<GetNFTsForUserRequest, 'UserPublicKeyBase58Check'>, options?: RequestOptions) => Promise<GetNFTsForUserResponse>;
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-bids-for-nft-post
 */
export declare const getAllBidsForNFT: (params: GetNFTBidsForNFTPostRequest, options?: RequestOptions) => Promise<GetNFTBidsForNFTPostResponse>;
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-bids-for-user
 */
export declare const getNFTBidsForUser: (params: PartialWithRequiredFields<GetNFTBidsForUserRequest, 'UserPublicKeyBase58Check'>, options?: RequestOptions) => Promise<GetNFTBidsForUserResponse>;
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-showcase
 */
export declare const getNFTShowcase: (params?: Partial<GetNFTShowcaseRequest>, options?: RequestOptions) => Promise<GetNFTShowcaseResponse>;
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-next-nft-showcase
 */
export declare const getNextNFTShowcase: (options?: RequestOptions) => Promise<GetNextNFTShowcaseResponse>;
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-collection-summary
 */
export declare const getNFTCollectionSummary: (params: PartialWithRequiredFields<GetNFTCollectionSummaryRequest, 'PostHashHex'>, options?: RequestOptions) => Promise<GetNFTCollectionSummaryResponse>;
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-entries-for-post-hash
 */
export declare const getNFTEntriesForPost: (params: PartialWithRequiredFields<GetNFTEntriesForPostHashRequest, 'PostHashHex'>, options?: RequestOptions) => Promise<GetNFTEntriesForPostHashResponse>;
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#get-hodlers-for-public-key
 */
export declare const getHodlersForUser: (params: PartialWithRequiredFields<GetHodlersForPublicKeyRequest, 'PublicKeyBase58Check'> | PartialWithRequiredFields<GetHodlersForPublicKeyRequest, 'Username'>, options?: RequestOptions) => Promise<GetHodlersForPublicKeyResponse>;
export declare const getHolders: (params: PartialWithRequiredFields<GetHodlersForPublicKeyRequest, 'PublicKeyBase58Check'> | PartialWithRequiredFields<GetHodlersForPublicKeyRequest, 'Username'>, options?: RequestOptions) => Promise<GetHodlersForPublicKeyResponse>;
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#get-diamonds-for-public-key
 */
export declare const getDiamondsForUser: (params: PartialWithRequiredFields<GetDiamondsForPublicKeyRequest, 'PublicKeyBase58Check'>, options?: RequestOptions) => Promise<GetDiamondsForPublicKeyResponse>;
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#get-follows-stateless
 */
export declare const getFollowersForUser: (params: PartialWithRequiredFields<GetFollowsStatelessRequest, 'PublicKeyBase58Check'> | PartialWithRequiredFields<GetFollowsStatelessRequest, 'Username'>, options?: RequestOptions) => Promise<GetFollowsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#is-following-public-key
 */
export declare const getIsFollowing: (params: IsFollowingPublicKeyRequest, options?: RequestOptions) => Promise<IsFolllowingPublicKeyResponse>;
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#is-hodling-public-key
 */
export declare const getIsHodling: (params: PartialWithRequiredFields<IsHodlingPublicKeyRequest, 'PublicKeyBase58Check' | 'IsHodlingPublicKeyBase58Check'>, options?: RequestOptions) => Promise<IsHodlingPublicKeyResponse>;
export declare const getIsHolding: (params: PartialWithRequiredFields<IsHodlingPublicKeyRequest, 'PublicKeyBase58Check' | 'IsHodlingPublicKeyBase58Check'>, options?: RequestOptions) => Promise<IsHodlingPublicKeyResponse>;
/**
 * https://docs.deso.org/deso-backend/api/media-endpoints#get-full-tiktok-url
 */
export declare const getFullTikTokURL: (params: GetFullTikTokURLRequest, options?: RequestOptions) => Promise<GetFullTikTokURLResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#get-user-association-by-id
 */
export declare const getUserAssociation: (associationId: string, options?: RequestOptions) => Promise<AssociationResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-user-associations
 */
export declare const countUserAssociation: (params: PartialWithRequiredFields<Omit<UserAssociationQuery, 'AssociationValues'>, 'AssociationType' | 'AssociationValue'>, options?: RequestOptions) => Promise<AssociationsCountResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-user-associations-by-multiple-values
 */
export declare const countUserAssociations: (params: PartialWithRequiredFields<Omit<UserAssociationQuery, 'AssociationValue'>, 'AssociationType' | 'AssociationValues'>, options?: RequestOptions) => Promise<AssociationCountsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#query-for-user-associations
 */
export declare const getUserAssociations: (params?: Partial<UserAssociationQuery>, options?: RequestOptions) => Promise<UserAssociationsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#get-post-association-by-id
 */
export declare const getPostAssociation: (associationId: string, options?: RequestOptions) => Promise<AssociationResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-post-associations
 */
export declare const countPostAssociation: (params: PartialWithRequiredFields<Omit<PostAssociationQuery, 'AssociationValues'>, 'AssociationType' | 'AssociationValue'>, options?: RequestOptions) => Promise<AssociationsCountResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-post-associations-by-multiple-values
 */
export declare const countPostAssociations: (params: PartialWithRequiredFields<Omit<PostAssociationQuery, 'AssociationValue'>, 'AssociationType' | 'AssociationValues'>, options?: RequestOptions) => Promise<AssociationCountsResponse>;
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#query-for-user-associations
 */
export declare const getPostAssociations: (params?: Partial<PostAssociationQuery>, options?: RequestOptions) => Promise<PostAssociationsResponse>;
export {};
