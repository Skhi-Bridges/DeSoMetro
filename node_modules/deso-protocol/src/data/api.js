var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _APIClient_instances, _APIClient_url;
class DeSoAPIError {
    constructor(message, status) {
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = message;
        this.status = status;
    }
    toString() {
        return this.message;
    }
}
const wrappedFetch = (url, options) => {
    return fetch(url, options).then((res) => {
        if (!res.ok) {
            return res.json().then((json) => {
                throw new DeSoAPIError(json.error, res.status);
            });
        }
        return res.text().then((rawBodyText) => {
            if (rawBodyText.length === 0) {
                // In the case where the response body is empty, it will fail to parse
                // as JSON so we just handle it as a special case.
                return null;
            }
            else {
                return JSON.parse(rawBodyText);
            }
        });
    });
};
export const cleanURL = (origin, endpoint) => {
    return `${origin.replace(/\/+$/, '')}/${endpoint.replace(/^\/+/, '')}`;
};
class APIClient {
    constructor() {
        _APIClient_instances.add(this);
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ''
        });
    }
    post(endpoint, data, options = {}) {
        const contentType = options.contentType ?? 'application/json';
        let body;
        switch (contentType) {
            case 'multipart/form-data':
                body = new FormData();
                for (const key in data) {
                    body.append(key, data[key]);
                }
                break;
            case 'application/json':
                body = JSON.stringify(data);
                break;
            default:
                throw new Error(`Unsupported content type: ${contentType}`);
        }
        return wrappedFetch(__classPrivateFieldGet(this, _APIClient_instances, "m", _APIClient_url).call(this, endpoint), {
            method: 'POST',
            body,
            headers: {
                // NOTE: We only set the content type header if it's not
                // multipart/form-data.  This is because we need the browser to
                // automatically set the boundary for us when we use FormData:
                // https://stackoverflow.com/a/39281156
                ...(contentType !== 'multipart/form-data' && {
                    'Content-Type': contentType,
                }),
            },
            ...options,
        });
    }
    get(endpoint) {
        return wrappedFetch(__classPrivateFieldGet(this, _APIClient_instances, "m", _APIClient_url).call(this, endpoint), { method: 'GET' });
    }
}
_APIClient_instances = new WeakSet(), _APIClient_url = function _APIClient_url(endpoint) {
    if (endpoint.startsWith('http://') || endpoint.startsWith('https://')) {
        // If the endpoint is a full URL, just use it directly.
        // This is an optional case that allows us to override the node URI.
        return endpoint;
    }
    // Otherwise use the node URI and endpoint to construct a URL.
    // This will be the typical case.
    return cleanURL(this.uri, endpoint);
};
class DeSoNodeClient extends APIClient {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'https://node.deso.org'
        });
    }
    get nodeURI() {
        return this.uri;
    }
    configure(options) {
        if (typeof options.nodeURI === 'string') {
            this.uri = options.nodeURI;
        }
    }
}
class DeSoMediaClient extends APIClient {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'https://media.deso.org'
        });
    }
    get mediaURI() {
        return this.uri;
    }
    configure(options) {
        if (typeof options.mediaURI === 'string') {
            this.uri = options.mediaURI;
        }
    }
}
export const media = new DeSoMediaClient();
export const api = new DeSoNodeClient();
//# sourceMappingURL=data:application/json;base64,