import { cleanURL, media } from './api.js';
////////////////////////////////////////////////////////////////////////////////
// Media: All of these endpoints are hitting a separate server dedicated to
// handling media requests (images, videos, etc.). The media server is
// independently configurable and does not receive any of the same same request
// options as a node.
////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/media-endpoints#get-video-status
 */
export const getVideoStatus = (params) => {
    return media.get(`api/v0/get-video-status/${params.videoId}`);
};
export const getLinkPreview = (url) => {
    return media.get(`api/v0/link-preview?url=${encodeURIComponent(url)}`);
};
export const buildProxyImageURL = (imageURL) => {
    return cleanURL(media.mediaURI, `api/v0/proxy-image?url=${encodeURIComponent(imageURL)}`);
};
/**
 * @param videoId this corresponds to the assetId returned from the uploadVideo endpoint
 * @param options.duration optional duration in milliseconds to poll for video ready status
 * @param options.timeout optional timeout in milliseconds before we stop polling for video ready status
 */
export const pollForVideoReady = async (videoId, { duration = 300, timeout = 3e5, // 5 minutes
 } = {}) => {
    const { status } = await getVideoStatus({ videoId });
    if (status.phase === 'ready') {
        return;
    }
    if (status.phase === 'failed') {
        throw new Error('There was an error processing the video upload.');
    }
    const startTime = Date.now();
    return new Promise((resolve, reject) => {
        const intervalId = setInterval(() => {
            getVideoStatus({ videoId })
                .then(({ status }) => {
                switch (status.phase) {
                    case 'ready':
                        clearTimeout(intervalId);
                        resolve();
                        return;
                    case 'failed':
                        clearTimeout(intervalId);
                        reject(new Error('there was an error processing the video upload.'));
                        return;
                }
                if (Date.now() - startTime > timeout) {
                    clearTimeout(intervalId);
                    reject(new Error('timed out waiting for video to be ready'));
                    return;
                }
            })
                .catch(reject);
        }, duration);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0YS9tZWRpYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMzQyxnRkFBZ0Y7QUFDaEYsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSwrRUFBK0U7QUFDL0UscUJBQXFCO0FBQ3JCLGdGQUFnRjtBQUVoRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUM1QixNQUE2QixFQUNJLEVBQUU7SUFDbkMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLDJCQUEyQixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFXLEVBQWdDLEVBQUU7SUFDMUUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLDJCQUEyQixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxRQUFnQixFQUFVLEVBQUU7SUFDN0QsT0FBTyxRQUFRLENBQ2IsS0FBSyxDQUFDLFFBQVEsRUFDZCwwQkFBMEIsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FDekQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQ3BDLE9BQWUsRUFDZixFQUNFLFFBQVEsR0FBRyxHQUFHLEVBQ2QsT0FBTyxHQUFHLEdBQUcsRUFBRSxZQUFZO0VBQzVCLEdBQUcsRUFBRSxFQUNTLEVBQUU7SUFDakIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sY0FBYyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUVyRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFFO1FBQzVCLE9BQU87S0FDUjtJQUVELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0tBQ3BFO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzdCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNsQyxjQUFjLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQztpQkFDeEIsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO2dCQUNuQixRQUFRLE1BQU0sQ0FBQyxLQUFLLEVBQUU7b0JBQ3BCLEtBQUssT0FBTzt3QkFDVixZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ3pCLE9BQU8sRUFBRSxDQUFDO3dCQUNWLE9BQU87b0JBQ1QsS0FBSyxRQUFRO3dCQUNYLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFDekIsTUFBTSxDQUNKLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQzdELENBQUM7d0JBQ0YsT0FBTztpQkFDVjtnQkFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLEdBQUcsT0FBTyxFQUFFO29CQUNwQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3pCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdELE9BQU87aUJBQ1I7WUFDSCxDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25CLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR2V0VmlkZW9TdGF0dXNSZXF1ZXN0LFxuICBHZXRWaWRlb1N0YXR1c1Jlc3BvbnNlLFxuICBMaW5rUHJldmlld1Jlc3BvbnNlLFxufSBmcm9tICcuLi9iYWNrZW5kLXR5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNsZWFuVVJMLCBtZWRpYSB9IGZyb20gJy4vYXBpLmpzJztcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBNZWRpYTogQWxsIG9mIHRoZXNlIGVuZHBvaW50cyBhcmUgaGl0dGluZyBhIHNlcGFyYXRlIHNlcnZlciBkZWRpY2F0ZWQgdG9cbi8vIGhhbmRsaW5nIG1lZGlhIHJlcXVlc3RzIChpbWFnZXMsIHZpZGVvcywgZXRjLikuIFRoZSBtZWRpYSBzZXJ2ZXIgaXNcbi8vIGluZGVwZW5kZW50bHkgY29uZmlndXJhYmxlIGFuZCBkb2VzIG5vdCByZWNlaXZlIGFueSBvZiB0aGUgc2FtZSBzYW1lIHJlcXVlc3Rcbi8vIG9wdGlvbnMgYXMgYSBub2RlLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBodHRwczovL2RvY3MuZGVzby5vcmcvZGVzby1iYWNrZW5kL2FwaS9tZWRpYS1lbmRwb2ludHMjZ2V0LXZpZGVvLXN0YXR1c1xuICovXG5leHBvcnQgY29uc3QgZ2V0VmlkZW9TdGF0dXMgPSAoXG4gIHBhcmFtczogR2V0VmlkZW9TdGF0dXNSZXF1ZXN0XG4pOiBQcm9taXNlPEdldFZpZGVvU3RhdHVzUmVzcG9uc2U+ID0+IHtcbiAgcmV0dXJuIG1lZGlhLmdldChgYXBpL3YwL2dldC12aWRlby1zdGF0dXMvJHtwYXJhbXMudmlkZW9JZH1gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMaW5rUHJldmlldyA9ICh1cmw6IHN0cmluZyk6IFByb21pc2U8TGlua1ByZXZpZXdSZXNwb25zZT4gPT4ge1xuICByZXR1cm4gbWVkaWEuZ2V0KGBhcGkvdjAvbGluay1wcmV2aWV3P3VybD0ke2VuY29kZVVSSUNvbXBvbmVudCh1cmwpfWApO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkUHJveHlJbWFnZVVSTCA9IChpbWFnZVVSTDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGNsZWFuVVJMKFxuICAgIG1lZGlhLm1lZGlhVVJJLFxuICAgIGBhcGkvdjAvcHJveHktaW1hZ2U/dXJsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGltYWdlVVJMKX1gXG4gICk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB2aWRlb0lkIHRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGFzc2V0SWQgcmV0dXJuZWQgZnJvbSB0aGUgdXBsb2FkVmlkZW8gZW5kcG9pbnRcbiAqIEBwYXJhbSBvcHRpb25zLmR1cmF0aW9uIG9wdGlvbmFsIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcyB0byBwb2xsIGZvciB2aWRlbyByZWFkeSBzdGF0dXNcbiAqIEBwYXJhbSBvcHRpb25zLnRpbWVvdXQgb3B0aW9uYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgYmVmb3JlIHdlIHN0b3AgcG9sbGluZyBmb3IgdmlkZW8gcmVhZHkgc3RhdHVzXG4gKi9cbmV4cG9ydCBjb25zdCBwb2xsRm9yVmlkZW9SZWFkeSA9IGFzeW5jIChcbiAgdmlkZW9JZDogc3RyaW5nLFxuICB7XG4gICAgZHVyYXRpb24gPSAzMDAsXG4gICAgdGltZW91dCA9IDNlNSwgLy8gNSBtaW51dGVzXG4gIH0gPSB7fVxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHsgc3RhdHVzIH0gPSBhd2FpdCBnZXRWaWRlb1N0YXR1cyh7IHZpZGVvSWQgfSk7XG5cbiAgaWYgKHN0YXR1cy5waGFzZSA9PT0gJ3JlYWR5Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzdGF0dXMucGhhc2UgPT09ICdmYWlsZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdmlkZW8gdXBsb2FkLicpO1xuICB9XG5cbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgZ2V0VmlkZW9TdGF0dXMoeyB2aWRlb0lkIH0pXG4gICAgICAgIC50aGVuKCh7IHN0YXR1cyB9KSA9PiB7XG4gICAgICAgICAgc3dpdGNoIChzdGF0dXMucGhhc2UpIHtcbiAgICAgICAgICAgIGNhc2UgJ3JlYWR5JzpcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGludGVydmFsSWQpO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChpbnRlcnZhbElkKTtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIG5ldyBFcnJvcigndGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHZpZGVvIHVwbG9hZC4nKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCd0aW1lZCBvdXQgd2FpdGluZyBmb3IgdmlkZW8gdG8gYmUgcmVhZHknKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICB9LCBkdXJhdGlvbik7XG4gIH0pO1xufTtcbiJdfQ==