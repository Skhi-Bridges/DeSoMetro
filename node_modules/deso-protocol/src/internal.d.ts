import { ConstructedTransactionResponse, DeSoNonce, OptionalFeesAndExtraData, RequestOptions, SubmitTransactionResponse, TransactionFee } from './backend-types/index.js';
import { PartialWithRequiredFields } from './data/index.js';
import { Transaction, TransactionExtraData, TransactionExtraDataKV, TransactionMetadataRecord, TransactionOutput } from './identity/index.js';
export declare const globalConfigOptions: {
    MinFeeRateNanosPerKB: number;
    LocalConstruction: boolean;
};
/**
 * Wraps signing and submit to include the configurable fee, and add defaults
 * for optional params.
 *
 * @param endpoint the endpoint for constructing the transaction
 * @param params tx specific params for the endpoint + optional fees and extra data
 * @param options options for the request, including whether to broadcast
 */
export declare const handleSignAndSubmit: (endpoint: string, params: OptionalFeesAndExtraData & any, options?: RequestOptions) => Promise<{
    constructedTransactionResponse: ConstructedTransactionResponse;
    submittedTransactionResponse: SubmitTransactionResponse | null;
}>;
export type BalanceModelTransactionFields = {
    Outputs?: TransactionOutput[];
    ExtraData?: {
        [k: string]: string;
    };
    ConsensusExtraDataKVs?: TransactionExtraDataKV[];
    MinFeeRateNanosPerKB?: number;
    TransactionFees?: TransactionFee[] | null;
    Nonce?: PartialWithRequiredFields<DeSoNonce, 'ExpirationBlockHeight'>;
};
export declare const convertExtraData: (extraData?: {
    [k: string]: string;
} | undefined, consensusExtraDataKVs?: TransactionExtraDataKV[]) => TransactionExtraData;
export declare const getTxWithFeeNanos: (pubKey: string, metadata: TransactionMetadataRecord, txFields?: BalanceModelTransactionFields) => Transaction;
export declare const constructBalanceModelTx: (pubKey: string, metadata: TransactionMetadataRecord, txFields?: BalanceModelTransactionFields) => Promise<ConstructedTransactionResponse>;
export declare const computeFee: (txn: Transaction, feeRate: number) => Transaction;
export declare const computeTxSize: (txn: Transaction) => number;
export declare const isMaybeDeSoPublicKey: (query: string) => boolean;
export declare const sumTransactionFees: (txFees?: TransactionFee[] | null) => number;
