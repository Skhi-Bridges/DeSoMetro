import { hexToBytes } from '@noble/hashes/utils';
import { TransactionMetadataDAOCoin, TransactionMetadataTransferDAOCoin, bs58PublicKeyToCompressedBytes, } from '../identity/index.js';
import { constructBalanceModelTx, handleSignAndSubmit, isMaybeDeSoPublicKey, } from '../internal.js';
export const burnDeSoToken = (params, options) => {
    return handleSignAndSubmit('api/v0/dao-coin', {
        ...params,
        OperationType: 'burn',
    }, { ...options, constructionFunction: constructBurnDeSoTokenTransaction });
};
export const constructBurnDeSoTokenTransaction = (params) => {
    const metadata = new TransactionMetadataDAOCoin();
    // TODO: I know we're passing hex strings representing uint256, but need
    // to figure out how they go to bytes.
    if (!isMaybeDeSoPublicKey(params.ProfilePublicKeyBase58CheckOrUsername)) {
        return Promise.reject('must provide profile public key, not username for local transaction construction');
    }
    metadata.coinsToBurnNanos = hexToBytes(params.CoinsToBurnNanos.replace('0x', 'x'));
    metadata.profilePublicKey = bs58PublicKeyToCompressedBytes(params.ProfilePublicKeyBase58CheckOrUsername);
    metadata.operationType = 1;
    return constructBalanceModelTx(params.UpdaterPublicKeyBase58Check, metadata, {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
export const mintDeSoToken = (params, options) => {
    return handleSignAndSubmit('api/v0/dao-coin', {
        ...params,
        OperationType: 'mint',
    }, { ...options, constructionFunction: constructMintDeSoTokenTransaction });
};
export const constructMintDeSoTokenTransaction = (params) => {
    const metadata = new TransactionMetadataDAOCoin();
    // TODO: I know we're passing hex strings representing uint256, but need
    // to figure out how they go to bytes.
    if (!isMaybeDeSoPublicKey(params.ProfilePublicKeyBase58CheckOrUsername)) {
        return Promise.reject('must provide profile public key, not username for local transaction construction');
    }
    metadata.coinsToMintNanos = hexToBytes(params.CoinsToMintNanos.replace('0x', 'x'));
    metadata.profilePublicKey = bs58PublicKeyToCompressedBytes(params.ProfilePublicKeyBase58CheckOrUsername);
    metadata.operationType = 0;
    return constructBalanceModelTx(params.UpdaterPublicKeyBase58Check, metadata, {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
export const updateDeSoTokenTransferRestrictionStatus = (params, options) => {
    return handleSignAndSubmit('api/v0/dao-coin', {
        ...params,
        OperationType: 'update_transfer_restriction_status',
    }, {
        ...options,
        constructionFunction: constructUpdateDeSoTokenTransferRestrictionStatusTransaction,
    });
};
export const constructUpdateDeSoTokenTransferRestrictionStatusTransaction = (params) => {
    const metadata = new TransactionMetadataDAOCoin();
    // TODO: I know we're passing hex strings representing uint256, but need
    // to figure out how they go to bytes.
    if (!isMaybeDeSoPublicKey(params.ProfilePublicKeyBase58CheckOrUsername)) {
        return Promise.reject('must provide profile public key, not username for local transaction construction');
    }
    metadata.profilePublicKey = bs58PublicKeyToCompressedBytes(params.ProfilePublicKeyBase58CheckOrUsername);
    metadata.operationType = 3;
    let transferRestrictionStatus;
    switch (params.TransferRestrictionStatus) {
        case 'dao_members_only':
            transferRestrictionStatus = 2;
            break;
        case 'permanently_unrestricted':
            transferRestrictionStatus = 3;
            break;
        case 'profile_owner_only':
            transferRestrictionStatus = 1;
            break;
        case 'unrestricted':
            transferRestrictionStatus = 0;
            break;
        default:
            return Promise.reject('invalid transfer restriction status value');
    }
    metadata.transferRestrictionStatus = transferRestrictionStatus;
    return constructBalanceModelTx(params.UpdaterPublicKeyBase58Check, metadata, {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
export const disableMintingDeSoToken = (params, options) => {
    return handleSignAndSubmit('api/v0/dao-coin', {
        ...params,
        OperationType: 'disable_minting',
    }, { ...options, constructionFunction: constructDisableMintingDeSoToken });
};
export const constructDisableMintingDeSoToken = (params) => {
    const metadata = new TransactionMetadataDAOCoin();
    // TODO: I know we're passing hex strings representing uint256, but need
    // to figure out how they go to bytes.
    if (!isMaybeDeSoPublicKey(params.ProfilePublicKeyBase58CheckOrUsername)) {
        return Promise.reject('must provide profile public key, not username for local transaction construction');
    }
    metadata.profilePublicKey = bs58PublicKeyToCompressedBytes(params.ProfilePublicKeyBase58CheckOrUsername);
    metadata.operationType = 2;
    return constructBalanceModelTx(params.UpdaterPublicKeyBase58Check, metadata, {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
/**
 * https://docs.deso.org/deso-backend/construct-transactions/dao-transactions-api#transfer-deso-token-dao-coin
 */
export const transferDeSoToken = (params, options) => {
    return handleSignAndSubmit('api/v0/transfer-dao-coin', params, {
        ...options,
        constructionFunction: constructTransferDeSoToken,
    });
};
export const constructTransferDeSoToken = (params) => {
    if (!isMaybeDeSoPublicKey(params.ProfilePublicKeyBase58CheckOrUsername)) {
        return Promise.reject('must provide profile public key, not username for local transaction construction');
    }
    const metadata = new TransactionMetadataTransferDAOCoin();
    metadata.daoCoinToTransferNanos = hexToBytes(params.DAOCoinToTransferNanos.replace('0x', 'x'));
    metadata.profilePublicKey = bs58PublicKeyToCompressedBytes(params.ProfilePublicKeyBase58CheckOrUsername);
    metadata.receiverPublicKey = bs58PublicKeyToCompressedBytes(params.ReceiverPublicKeyBase58CheckOrUsername);
    return constructBalanceModelTx(params.SenderPublicKeyBase58Check, metadata, {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
// TODO: Balance model transaction construction for limit orders.
/**
 * https://docs.deso.org/deso-backend/construct-transactions/dao-transactions-api#create-deso-token-dao-coin-limit-order
 */
export const createDeSoTokenLimitOrder = (params, options) => {
    return handleSignAndSubmit('api/v0/create-dao-coin-limit-order', {
        ...params,
    }, options);
};
export const createDeSoTokenMarketOrder = (params, options) => {
    return handleSignAndSubmit('api/v0/create-dao-coin-market-order', {
        ...params,
    }, options);
};
export const buyDeSoTokenMarketOrder = (params, options) => {
    return handleSignAndSubmit('api/v0/create-dao-coin-market-order', {
        ...params,
        SellingDAOCoinCreatorPublicKeyBase58Check: '',
        OperationType: 'BID',
    }, options);
};
export const sellDeSoTokenMarketOrder = (params, options) => {
    return handleSignAndSubmit('api/v0/create-dao-coin-market-order', {
        ...params,
        SellingDAOCoinCreatorPublicKeyBase58Check: '',
        OperationType: 'ASK',
    }, options);
};
/**
 * https://docs.deso.org/deso-backend/construct-transactions/dao-transactions-api#cancel-deso-token-dao-coin-limit-order
 */
export const cancelDeSoTokenLimitOrder = (params, options) => {
    return handleSignAndSubmit('api/v0/cancel-dao-coin-limit-order', params, options);
};
//# sourceMappingURL=data:application/json;base64,