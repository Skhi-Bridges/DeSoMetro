import { bytesToHex, hexToBytes } from '@noble/hashes/utils';
import { TransactionExtraDataKV, TransactionMetadataAuthorizeDerivedKey, bs58PublicKeyToCompressedBytes, encodeUTF8ToBytes, } from '../identity/index.js';
import { constructBalanceModelTx, handleSignAndSubmit } from '../internal.js';
export const authorizeDerivedKey = (params, options) => {
    return handleSignAndSubmit('api/v0/authorize-derived-key', params, {
        ...options,
        constructionFunction: constructAuthorizeDerivedKey,
    });
};
export const constructAuthorizeDerivedKey = (params) => {
    const metadata = new TransactionMetadataAuthorizeDerivedKey();
    metadata.accessSignature = hexToBytes(params.AccessSignature || '');
    metadata.derivedPublicKey = bs58PublicKeyToCompressedBytes(params.DerivedPublicKeyBase58Check);
    metadata.expirationBlock = params.ExpirationBlock;
    metadata.operationType = params.DeleteKey ? 0 : 1;
    const consensusExtraDataKVs = [];
    if (params.DerivedKeySignature) {
        consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('DerivedPublicKey'), bs58PublicKeyToCompressedBytes(params.DerivedPublicKeyBase58Check)));
    }
    if (params.TransactionSpendingLimitHex) {
        const transactionSpendingLimitBuf = hexToBytes(params.TransactionSpendingLimitHex);
        if (transactionSpendingLimitBuf.length) {
            consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('TransactionSpendingLimit'), transactionSpendingLimitBuf));
        }
    }
    if (params.Memo || params.AppName) {
        const memo = params.Memo || params.AppName;
        consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('DerivedKeyMemo'), encodeUTF8ToBytes(bytesToHex(encodeUTF8ToBytes(memo)))));
    }
    return constructBalanceModelTx(params.OwnerPublicKeyBase58Check, metadata, {
        ConsensusExtraDataKVs: consensusExtraDataKVs,
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXZlZC1rZXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RyYW5zYWN0aW9ucy9kZXJpdmVkLWtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVM3RCxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLHNDQUFzQyxFQUN0Qyw4QkFBOEIsRUFDOUIsaUJBQWlCLEdBQ2xCLE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFnQjlFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLE1BQXdDLEVBQ3hDLE9BQXdCLEVBQ3lDLEVBQUU7SUFDbkUsT0FBTyxtQkFBbUIsQ0FBQyw4QkFBOEIsRUFBRSxNQUFNLEVBQUU7UUFDakUsR0FBRyxPQUFPO1FBQ1Ysb0JBQW9CLEVBQUUsNEJBQTRCO0tBQ25ELENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQzFDLE1BQXdDLEVBQ0MsRUFBRTtJQUMzQyxNQUFNLFFBQVEsR0FBRyxJQUFJLHNDQUFzQyxFQUFFLENBQUM7SUFDOUQsUUFBUSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRSxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsOEJBQThCLENBQ3hELE1BQU0sQ0FBQywyQkFBMkIsQ0FDbkMsQ0FBQztJQUNGLFFBQVEsQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUNsRCxRQUFRLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0scUJBQXFCLEdBQTZCLEVBQUUsQ0FBQztJQUMzRCxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtRQUM5QixxQkFBcUIsQ0FBQyxJQUFJLENBQ3hCLElBQUksc0JBQXNCLENBQ3hCLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLEVBQ3JDLDhCQUE4QixDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUNuRSxDQUNGLENBQUM7S0FDSDtJQUNELElBQUksTUFBTSxDQUFDLDJCQUEyQixFQUFFO1FBQ3RDLE1BQU0sMkJBQTJCLEdBQUcsVUFBVSxDQUM1QyxNQUFNLENBQUMsMkJBQTJCLENBQ25DLENBQUM7UUFDRixJQUFJLDJCQUEyQixDQUFDLE1BQU0sRUFBRTtZQUN0QyxxQkFBcUIsQ0FBQyxJQUFJLENBQ3hCLElBQUksc0JBQXNCLENBQ3hCLGlCQUFpQixDQUFDLDBCQUEwQixDQUFDLEVBQzdDLDJCQUEyQixDQUM1QixDQUNGLENBQUM7U0FDSDtLQUNGO0lBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDakMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSyxNQUFNLENBQUMsT0FBa0IsQ0FBQztRQUN2RCxxQkFBcUIsQ0FBQyxJQUFJLENBQ3hCLElBQUksc0JBQXNCLENBQ3hCLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLEVBQ25DLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3ZELENBQ0YsQ0FBQztLQUNIO0lBQ0QsT0FBTyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMseUJBQXlCLEVBQUUsUUFBUSxFQUFFO1FBQ3pFLHFCQUFxQixFQUFFLHFCQUFxQjtRQUM1QyxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7UUFDM0Isb0JBQW9CLEVBQUUsTUFBTSxDQUFDLG9CQUFvQjtRQUNqRCxlQUFlLEVBQUUsTUFBTSxDQUFDLGVBQWU7S0FDeEMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0hleCwgaGV4VG9CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHtcbiAgQXV0aG9yaXplRGVyaXZlZEtleVJlcXVlc3QsXG4gIEF1dGhvcml6ZURlcml2ZWRLZXlSZXNwb25zZSxcbiAgQ29uc3RydWN0ZWRUcmFuc2FjdGlvblJlc3BvbnNlLFxuICBSZXF1ZXN0T3B0aW9ucyxcbiAgVHhSZXF1ZXN0V2l0aE9wdGlvbmFsRmVlc0FuZEV4dHJhRGF0YSxcbn0gZnJvbSAnLi4vYmFja2VuZC10eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBQYXJ0aWFsV2l0aFJlcXVpcmVkRmllbGRzIH0gZnJvbSAnLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQge1xuICBUcmFuc2FjdGlvbkV4dHJhRGF0YUtWLFxuICBUcmFuc2FjdGlvbk1ldGFkYXRhQXV0aG9yaXplRGVyaXZlZEtleSxcbiAgYnM1OFB1YmxpY0tleVRvQ29tcHJlc3NlZEJ5dGVzLFxuICBlbmNvZGVVVEY4VG9CeXRlcyxcbn0gZnJvbSAnLi4vaWRlbnRpdHkvaW5kZXguanMnO1xuaW1wb3J0IHsgY29uc3RydWN0QmFsYW5jZU1vZGVsVHgsIGhhbmRsZVNpZ25BbmRTdWJtaXQgfSBmcm9tICcuLi9pbnRlcm5hbC5qcyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3RlZEFuZFN1Ym1pdHRlZFR4IH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuLyoqXG4gKiBodHRwczovL2RvY3MuZGVzby5vcmcvZGVzby1iYWNrZW5kL2NvbnN0cnVjdC10cmFuc2FjdGlvbnMvZGVyaXZlZC1rZXlzLXRyYW5zYWN0aW9uLWFwaSNhdXRob3JpemUtZGVyaXZlZC1rZXlcbiAqL1xuZXhwb3J0IHR5cGUgQXV0aG9yaXplRGVyaXZlZEtleVJlcXVlc3RQYXJhbXMgPVxuICBUeFJlcXVlc3RXaXRoT3B0aW9uYWxGZWVzQW5kRXh0cmFEYXRhPFxuICAgIFBhcnRpYWxXaXRoUmVxdWlyZWRGaWVsZHM8XG4gICAgICBBdXRob3JpemVEZXJpdmVkS2V5UmVxdWVzdCxcbiAgICAgIHwgJ093bmVyUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdEZXJpdmVkUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRIZXgnXG4gICAgICB8ICdNZW1vJ1xuICAgICAgfCAnRXhwaXJhdGlvbkJsb2NrJ1xuICAgID5cbiAgPjtcbmV4cG9ydCBjb25zdCBhdXRob3JpemVEZXJpdmVkS2V5ID0gKFxuICBwYXJhbXM6IEF1dGhvcml6ZURlcml2ZWRLZXlSZXF1ZXN0UGFyYW1zLFxuICBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnNcbik6IFByb21pc2U8Q29uc3RydWN0ZWRBbmRTdWJtaXR0ZWRUeDxBdXRob3JpemVEZXJpdmVkS2V5UmVzcG9uc2U+PiA9PiB7XG4gIHJldHVybiBoYW5kbGVTaWduQW5kU3VibWl0KCdhcGkvdjAvYXV0aG9yaXplLWRlcml2ZWQta2V5JywgcGFyYW1zLCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBjb25zdHJ1Y3Rpb25GdW5jdGlvbjogY29uc3RydWN0QXV0aG9yaXplRGVyaXZlZEtleSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgY29uc3RydWN0QXV0aG9yaXplRGVyaXZlZEtleSA9IChcbiAgcGFyYW1zOiBBdXRob3JpemVEZXJpdmVkS2V5UmVxdWVzdFBhcmFtc1xuKTogUHJvbWlzZTxDb25zdHJ1Y3RlZFRyYW5zYWN0aW9uUmVzcG9uc2U+ID0+IHtcbiAgY29uc3QgbWV0YWRhdGEgPSBuZXcgVHJhbnNhY3Rpb25NZXRhZGF0YUF1dGhvcml6ZURlcml2ZWRLZXkoKTtcbiAgbWV0YWRhdGEuYWNjZXNzU2lnbmF0dXJlID0gaGV4VG9CeXRlcyhwYXJhbXMuQWNjZXNzU2lnbmF0dXJlIHx8ICcnKTtcbiAgbWV0YWRhdGEuZGVyaXZlZFB1YmxpY0tleSA9IGJzNThQdWJsaWNLZXlUb0NvbXByZXNzZWRCeXRlcyhcbiAgICBwYXJhbXMuRGVyaXZlZFB1YmxpY0tleUJhc2U1OENoZWNrXG4gICk7XG4gIG1ldGFkYXRhLmV4cGlyYXRpb25CbG9jayA9IHBhcmFtcy5FeHBpcmF0aW9uQmxvY2s7XG4gIG1ldGFkYXRhLm9wZXJhdGlvblR5cGUgPSBwYXJhbXMuRGVsZXRlS2V5ID8gMCA6IDE7XG4gIGNvbnN0IGNvbnNlbnN1c0V4dHJhRGF0YUtWczogVHJhbnNhY3Rpb25FeHRyYURhdGFLVltdID0gW107XG4gIGlmIChwYXJhbXMuRGVyaXZlZEtleVNpZ25hdHVyZSkge1xuICAgIGNvbnNlbnN1c0V4dHJhRGF0YUtWcy5wdXNoKFxuICAgICAgbmV3IFRyYW5zYWN0aW9uRXh0cmFEYXRhS1YoXG4gICAgICAgIGVuY29kZVVURjhUb0J5dGVzKCdEZXJpdmVkUHVibGljS2V5JyksXG4gICAgICAgIGJzNThQdWJsaWNLZXlUb0NvbXByZXNzZWRCeXRlcyhwYXJhbXMuRGVyaXZlZFB1YmxpY0tleUJhc2U1OENoZWNrKVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgaWYgKHBhcmFtcy5UcmFuc2FjdGlvblNwZW5kaW5nTGltaXRIZXgpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvblNwZW5kaW5nTGltaXRCdWYgPSBoZXhUb0J5dGVzKFxuICAgICAgcGFyYW1zLlRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdEhleFxuICAgICk7XG4gICAgaWYgKHRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdEJ1Zi5sZW5ndGgpIHtcbiAgICAgIGNvbnNlbnN1c0V4dHJhRGF0YUtWcy5wdXNoKFxuICAgICAgICBuZXcgVHJhbnNhY3Rpb25FeHRyYURhdGFLVihcbiAgICAgICAgICBlbmNvZGVVVEY4VG9CeXRlcygnVHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0JyksXG4gICAgICAgICAgdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0QnVmXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMuTWVtbyB8fCBwYXJhbXMuQXBwTmFtZSkge1xuICAgIGNvbnN0IG1lbW8gPSBwYXJhbXMuTWVtbyB8fCAocGFyYW1zLkFwcE5hbWUgYXMgc3RyaW5nKTtcbiAgICBjb25zZW5zdXNFeHRyYURhdGFLVnMucHVzaChcbiAgICAgIG5ldyBUcmFuc2FjdGlvbkV4dHJhRGF0YUtWKFxuICAgICAgICBlbmNvZGVVVEY4VG9CeXRlcygnRGVyaXZlZEtleU1lbW8nKSxcbiAgICAgICAgZW5jb2RlVVRGOFRvQnl0ZXMoYnl0ZXNUb0hleChlbmNvZGVVVEY4VG9CeXRlcyhtZW1vKSkpXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY29uc3RydWN0QmFsYW5jZU1vZGVsVHgocGFyYW1zLk93bmVyUHVibGljS2V5QmFzZTU4Q2hlY2ssIG1ldGFkYXRhLCB7XG4gICAgQ29uc2Vuc3VzRXh0cmFEYXRhS1ZzOiBjb25zZW5zdXNFeHRyYURhdGFLVnMsXG4gICAgRXh0cmFEYXRhOiBwYXJhbXMuRXh0cmFEYXRhLFxuICAgIE1pbkZlZVJhdGVOYW5vc1BlcktCOiBwYXJhbXMuTWluRmVlUmF0ZU5hbm9zUGVyS0IsXG4gICAgVHJhbnNhY3Rpb25GZWVzOiBwYXJhbXMuVHJhbnNhY3Rpb25GZWVzLFxuICB9KTtcbn07XG4iXX0=