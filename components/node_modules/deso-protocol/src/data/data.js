import { api, cleanURL } from './api.js';
export const getPostsStateless = (params, options) => {
    const endpoint = 'api/v0/get-posts-stateless';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getSinglePost = (params, options) => {
    const endpoint = 'api/v0/get-single-post';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getPostsForUser = (params, options) => {
    const endpoint = 'api/v0/get-posts-for-public-key';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getHotFeed = (params, options) => {
    const endpoint = 'api/v0/get-hot-feed';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getDiamondedPosts = (params, options) => {
    const endpoint = 'api/v0/get-diamonded-posts';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getLikesForPost = (params, options) => {
    const endpoint = 'api/v0/get-likes-for-post';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getDiamondsForPost = (params, options) => {
    const endpoint = 'api/v0/get-diamonds-for-post';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getRepostsForPost = (params, options) => {
    const endpoint = 'api/v0/get-reposts-for-post';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getQuoteRepostsForPost = (params, options) => {
    const endpoint = 'api/v0/get-quote-reposts-for-post';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getPostsHashHexList = (params, options) => {
    const endpoint = 'api/v0/get-posts-hashhexlist';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getUsersStateless = (params, options) => {
    const endpoint = 'api/v0/get-users-stateless';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-single-profile-picture
 */
export const buildProfilePictureUrl = (PublicKeyBase58Check, options) => {
    const nodeURI = options?.nodeURI ?? api.nodeURI;
    return cleanURL(nodeURI, `/api/v0/get-single-profile-picture/${PublicKeyBase58Check}${options?.fallbackImageUrl ? `?fallback=${options.fallbackImageUrl}` : ''}`);
};
export const getSingleProfile = (params, options) => {
    const endpoint = 'api/v0/get-single-profile';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getProfiles = (params, options) => {
    const endpoint = 'api/v0/get-profiles';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-metadata
 */
export const getUserMetadata = (params, options) => {
    const endpoint = `api/v0/get-user-metadata/${params.PublicKeyBase58Check}`;
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-derived-keys
 */
export const getUserDerivedKeys = (params, options) => {
    const endpoint = 'api/v0/get-user-derived-keys';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getAllMessagingGroupKeys = (params, options) => {
    const endpoint = 'api/v0/get-all-messaging-group-keys';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const registerMessagingGroupKey = (params, options) => {
    const endpoint = 'api/v0/register-messaging-group-key';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Messaging Endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-all-user-message-threads
 */
export const getAllMessageThreads = (params, options) => {
    const endpoint = 'api/v0/get-all-user-message-threads';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getPaginatedGroupChatThread = (params, options) => {
    const actualParams = {
        ...params,
    };
    if (typeof actualParams.StartTimeStampString === 'undefined' &&
        typeof actualParams.StartTimeStamp === 'number') {
        actualParams.StartTimeStampString = actualParams.StartTimeStamp.toString();
    }
    const endpoint = 'api/v0/get-paginated-messages-for-group-chat-thread';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, actualParams);
};
export const getPaginatedDMThread = (params, options) => {
    const actualParams = {
        ...params,
    };
    if (typeof actualParams.StartTimeStampString === 'undefined' &&
        typeof actualParams.StartTimeStamp === 'number') {
        actualParams.StartTimeStampString = actualParams.StartTimeStamp.toString();
    }
    const endpoint = 'api/v0/get-paginated-messages-for-dm-thread';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, actualParams);
};
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-user-group-chat-threads-ordered-by-timestamp
 */
export const getGroupChatThreads = (params, options) => {
    const endpoint = 'api/v0/get-user-group-chat-threads-ordered-by-timestamp';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/messages-endpoints#get-user-direct-message-threads-ordered-by-timestamp
 */
export const getDMThreads = (params, options) => {
    const endpoint = 'api/v0/get-user-dm-threads-ordered-by-timestamp';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Access Group Endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-user-access-groups
 */
export const getAllAccessGroups = (params, options) => {
    const endpoint = 'api/v0/get-all-user-access-groups';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-access-groups-owned
 */
export const getAllAccessGroupsOwned = (params, options) => {
    const endpoint = 'api/v0/get-all-user-access-groups-owned';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-access-groups-owned
 */
export const getAllAccessGroupsMemberOnly = (params, options) => {
    const endpoint = 'api/v0/get-all-user-access-groups-member-only';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#check-party-access-groups
 */
export const checkPartyAccessGroups = (params, options) => {
    const endpoint = 'api/v0/check-party-access-groups';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-access-group-information
 */
export const getAccessGroupInfo = (params, options) => {
    const endpoint = 'api/v0/get-access-group-info';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-access-group-member-information
 */
export const getAccessGroupMemberInfo = (params, options) => {
    const endpoint = 'api/v0/get-access-group-member-info';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-paginated-access-group-members
 */
export const getPaginatedAccessGroupMembers = (params, options) => {
    const endpoint = 'api/v0/get-paginated-access-group-members';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-bulk-access-group-entries
 */
export const getBulkAccessGroups = (params, options) => {
    const endpoint = 'api/v0/get-bulk-access-group-entries';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Transaction Endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
export const getTransaction = (params, options) => {
    const endpoint = 'api/v0/get-txn';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * Waits for a transaction to be found in the mempool. If it is found before the
 * timeout, it resolves immediately. If it is not found before the timeout, it
 * rejects. Useful for sequencing transactions that depend on other
 * transactions.
 *
 * @param TxnHashHex - hex encoded transaction we are looking for in the mempool
 * @param options - options object
 * @param options.timeout - timeout in milliseconds, we'll wait 1 minute before
 * throwing an error by default.
 */
export const waitForTransactionFound = async (TxnHashHex, { timeout = 60000 } = {}) => {
    // In the best case scenario we'll find the tx immediately
    const { TxnFound } = await getTransaction({ TxnHashHex });
    if (TxnFound) {
        return;
    }
    const start = Date.now();
    return new Promise((resolve, reject) => {
        const interval = setInterval(async () => {
            try {
                const { TxnFound } = await getTransaction({ TxnHashHex });
                if (TxnFound) {
                    clearInterval(interval);
                    resolve();
                }
            }
            catch (e) {
                clearInterval(interval);
                reject(e);
            }
            if (Date.now() - start > timeout) {
                clearInterval(interval);
                reject(new Error('Timed out waiting for transaction to be found'));
            }
        }, 150);
    });
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Metadata Endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/backend-api#health-check
 */
export const healthCheck = (options) => {
    const endpoint = 'api/v0/health-check';
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
/**
 * https://docs.deso.org/deso-backend/api/backend-api#get-exchange-rate
 */
export const getExchangeRates = (options) => {
    const endpoint = 'api/v0/get-exchange-rate';
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
/**
 */
export const getPublicKeyForUsername = (username, options) => {
    const endpoint = 'api/v0/get-public-key-for-user-name';
    return api.get((options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint) +
        `/${username}`);
};
/**
 */
export const getUsernameForPublicKey = (publicKey, options) => {
    const endpoint = 'api/v0/get-user-name-for-public-key';
    return api.get((options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint) +
        `/${publicKey}`);
};
export const getTransactionInfo = (params = {}, options) => {
    const endpoint = 'api/v1/transaction-info';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getBlock = (params, options) => {
    const endpoint = 'api/v1/block';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/backend-api#get-app-state
 */
export const getAppState = (params = {}, options) => {
    const endpoint = 'api/v0/get-app-state';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const getGlobalParams = (options) => {
    const endpoint = 'api/v0/get-global-params';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, {});
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Tx Spending Limit endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/transaction-spending-limits-endpoints#get-transaction-spending-limit-response-from-hex
 */
export const getTransactionSpendingLimitFromHex = (hex, options) => {
    const endpoint = `api/v0/get-transaction-spending-limit-response-from-hex/${hex}`;
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
/**
 * https://docs.deso.org/deso-backend/api/transaction-spending-limits-endpoints#get-transaction-spending-limit-hex-string
 */
export const getTransactionSpendingLimitHex = (params, options) => {
    const endpoint = 'api/v0/get-transaction-spending-limit-hex-string';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Notification endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/notification-endpoints#get-notifications
 */
export const getNotifications = (params, options) => {
    const endpoint = 'api/v0/get-notifications';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/notification-endpoints#get-unread-notification-count
 */
export const getUnreadNotificationsCount = (params, options) => {
    const endpoint = 'api/v0/get-unread-notifications-count';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Miner endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/miner-endpoints#get-block-template
 */
export const getBlockTemplate = (params, options) => {
    const endpoint = 'api/v0/get-block-template';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/miner-endpoints#submit-block
 */
export const submitBlock = (params, options) => {
    const endpoint = 'api/v0/submit-block';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// NFT Endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nfts-for-user
 */
export const getNFTsForUser = (params, options) => {
    const endpoint = 'api/v0/get-nfts-for-user';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-bids-for-nft-post
 */
export const getAllBidsForNFT = (params, options) => {
    const endpoint = 'api/v0/get-nft-bids-for-nft-post';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-bids-for-user
 */
export const getNFTBidsForUser = (params, options) => {
    const endpoint = 'api/v0/get-nft-bids-for-user';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-showcase
 */
export const getNFTShowcase = (params = {}, options) => {
    const endpoint = 'api/v0/get-nft-showcase';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-next-nft-showcase
 */
export const getNextNFTShowcase = (options) => {
    const endpoint = 'api/v0/get-next-nft-showcase';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, {});
};
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-collection-summary
 */
export const getNFTCollectionSummary = (params, options) => {
    const endpoint = 'api/v0/get-nft-collection-summary';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-entries-for-post-hash
 */
export const getNFTEntriesForPost = (params, options) => {
    const endpoint = 'api/v0/get-nft-entries-for-nft-post';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Social endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#get-hodlers-for-public-key
 */
export const getHodlersForUser = (params, options) => {
    const endpoint = 'api/v0/get-hodlers-for-public-key';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
// Alias for getHodlers
export const getHolders = getHodlersForUser;
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#get-diamonds-for-public-key
 */
export const getDiamondsForUser = (params, options) => {
    const endpoint = 'api/v0/get-diamonds-for-public-key';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#get-follows-stateless
 */
export const getFollowersForUser = (params, options) => {
    const endpoint = 'api/v0/get-follows-stateless';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#is-following-public-key
 */
export const getIsFollowing = (params, options) => {
    const endpoint = 'api/v0/is-following-public-key';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/social-endpoints#is-hodling-public-key
 */
export const getIsHodling = (params, options) => {
    const endpoint = 'api/v0/is-hodling-public-key';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
// Alias for getIsHodling
export const getIsHolding = getIsHodling;
////////////////////////////////////////////////////////////////////////////////////////////////
// Media endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/media-endpoints#get-full-tiktok-url
 */
export const getFullTikTokURL = (params, options) => {
    const endpoint = 'api/v0/get-full-tiktok-url';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
////////////////////////////////////////////////////////////////////////////////////////////////
// Associations endpoints
////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#get-user-association-by-id
 */
export const getUserAssociation = (associationId, options) => {
    const endpoint = `api/v0/user-associations/${associationId}`;
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-user-associations
 */
export const countUserAssociation = (params, options) => {
    const endpoint = 'api/v0/user-associations/count';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-user-associations-by-multiple-values
 */
export const countUserAssociations = (params, options) => {
    const endpoint = 'api/v0/user-associations/counts';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#query-for-user-associations
 */
export const getUserAssociations = (params = {}, options) => {
    const endpoint = 'api/v0/user-associations/query';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#get-post-association-by-id
 */
export const getPostAssociation = (associationId, options) => {
    const endpoint = `api/v0/post-associations/${associationId}`;
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-post-associations
 */
export const countPostAssociation = (params, options) => {
    const endpoint = 'api/v0/post-associations/count';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#count-post-associations-by-multiple-values
 */
export const countPostAssociations = (params, options) => {
    const endpoint = 'api/v0/post-associations/counts';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
/**
 * https://docs.deso.org/deso-backend/api/associations-endpoints#query-for-user-associations
 */
export const getPostAssociations = (params = {}, options) => {
    const endpoint = 'api/v0/post-associations/query';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
//# sourceMappingURL=data:application/json;base64,