import { ConstructedTransactionResponse, CreateFollowTxnStatelessRequest, CreateFollowTxnStatelessResponse, CreateLikeStatelessRequest, CreateLikeStatelessResponse, SendDiamondsRequest, SendDiamondsResponse, SendNewMessageRequest, SendNewMessageResponse, SubmitPostRequest, SubmitPostResponse, TransactionFee, UpdateProfileRequest, UpdateProfileResponse } from '../backend-types/index.js';
import { PartialWithRequiredFields } from '../data/index.js';
import { ConstructedAndSubmittedTx, TxRequestOptions, TypeWithOptionalFeesAndExtraData } from '../types.js';
export declare const constructUpdateProfileTransaction: (params: TypeWithOptionalFeesAndExtraData<UpdateProfileRequest>) => Promise<ConstructedTransactionResponse>;
type UpdateProfileRequestParams = TypeWithOptionalFeesAndExtraData<PartialWithRequiredFields<UpdateProfileRequest, 'UpdaterPublicKeyBase58Check' | 'ProfilePublicKeyBase58Check' | 'NewCreatorBasisPoints' | 'NewStakeMultipleBasisPoints'>>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#update-profile
 */
export declare const updateProfile: (params: UpdateProfileRequestParams, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<UpdateProfileResponse | ConstructedTransactionResponse>>;
export declare const constructSubmitPost: (params: SubmitPostRequestParams) => Promise<ConstructedTransactionResponse>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#submit-post
 */
export type SubmitPostRequestParams = TypeWithOptionalFeesAndExtraData<PartialWithRequiredFields<SubmitPostRequest, 'UpdaterPublicKeyBase58Check' | 'BodyObj'>>;
export declare const submitPost: (params: SubmitPostRequestParams, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<SubmitPostResponse | ConstructedTransactionResponse>>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#follow
 */
export type CreateFollowTxnRequestParams = TypeWithOptionalFeesAndExtraData<PartialWithRequiredFields<CreateFollowTxnStatelessRequest, 'FollowedPublicKeyBase58Check' | 'FollowerPublicKeyBase58Check'>>;
export declare const updateFollowingStatus: (params: CreateFollowTxnRequestParams, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<CreateFollowTxnStatelessResponse>>;
export declare const constructFollowTransaction: (params: CreateFollowTxnRequestParams) => Promise<ConstructedTransactionResponse>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-diamonds
 */
export declare const sendDiamonds: (params: TypeWithOptionalFeesAndExtraData<SendDiamondsRequest>, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<SendDiamondsResponse>>;
export declare const constructDiamondTransaction: (params: TypeWithOptionalFeesAndExtraData<SendDiamondsRequest>) => Promise<ConstructedTransactionResponse>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#like
 */
export type CreateLikeTransactionParams = TypeWithOptionalFeesAndExtraData<PartialWithRequiredFields<CreateLikeStatelessRequest, 'LikedPostHashHex' | 'ReaderPublicKeyBase58Check'>>;
export declare const updateLikeStatus: (params: CreateLikeTransactionParams, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<CreateLikeStatelessResponse>>;
export declare const constructLikeTransaction: (params: CreateLikeTransactionParams) => Promise<ConstructedTransactionResponse>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-direct-message
 * TODO: for DM should we fill in the messaging group name as a convenience? For DM it is currently always 'default-key'
 */
type SendNewMessageParams = TypeWithOptionalFeesAndExtraData<Omit<SendNewMessageRequest, 'TimestampNanosString'>>;
export declare const sendDMMessage: (params: SendNewMessageParams, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<SendNewMessageResponse | ConstructedTransactionResponse>>;
export declare const constructSendDMTransaction: (params: SendNewMessageParams) => Promise<ConstructedTransactionResponse>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-direct-message
 */
export declare const updateDMMessage: (params: TypeWithOptionalFeesAndExtraData<SendNewMessageRequest>, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<SendNewMessageResponse | ConstructedTransactionResponse>>;
export declare const constructUpdateDMTransaction: (params: TypeWithOptionalFeesAndExtraData<SendNewMessageRequest>) => Promise<ConstructedTransactionResponse>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-group-chat-message
 */
export declare const sendGroupChatMessage: (params: SendNewMessageParams, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<SendNewMessageResponse | ConstructedTransactionResponse>>;
export declare const constructSendGroupChatMessageTransaction: (params: SendNewMessageParams) => Promise<ConstructedTransactionResponse>;
/**
 * Convenience function to send a message to a group chat or DM that handles
 * encryption and access group party check. AccessGroup is optional, and if not
 * provided we make the assumption that this is a direct message and use the
 * user's default messaging group. You may also pass an optional
 * sendMessageUnencrypted flag to force the message to be sent unencrypted.
 */
interface SendMessageParams {
    SenderPublicKeyBase58Check: string;
    RecipientPublicKeyBase58Check: string;
    Message: string;
    AccessGroup?: string;
    ExtraData?: {
        [key: string]: string;
    };
    MinFeeRateNanosPerKB?: number;
    TransactionFees?: TransactionFee[];
}
export declare const sendMessage: (params: SendMessageParams, options?: TxRequestOptions & {
    sendMessageUnencrypted?: boolean;
}) => Promise<ConstructedAndSubmittedTx<SendNewMessageResponse | ConstructedTransactionResponse>>;
/**
 * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-group-chat-message
 */
export declare const updateGroupChatMessage: (params: TypeWithOptionalFeesAndExtraData<SendNewMessageRequest>, options?: TxRequestOptions) => Promise<ConstructedAndSubmittedTx<SendNewMessageResponse | ConstructedTransactionResponse>>;
export declare const constructUpdateGroupChatMessageTransaction: (params: TypeWithOptionalFeesAndExtraData<SendNewMessageRequest>) => Promise<ConstructedTransactionResponse>;
export {};
