import { hexToBytes } from '@noble/hashes/utils';
import { TransactionMetadataCreatePostAssociation, TransactionMetadataCreateUserAssociation, TransactionMetadataDeletePostAssociation, TransactionMetadataDeleteUserAssociation, bs58PublicKeyToCompressedBytes, encodeUTF8ToBytes, } from '../identity/index.js';
import { constructBalanceModelTx, getTxWithFeeNanos, handleSignAndSubmit, sumTransactionFees, } from '../internal.js';
import { guardTxPermission } from './utils.js';
export const createUserAssociation = async (params, options) => {
    const txWithFee = getTxWithFeeNanos(params.TransactorPublicKeyBase58Check, buildCreateUserAssociationMetadata(params), {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
    if (options?.checkPermissions !== false) {
        await guardTxPermission({
            GlobalDESOLimit: txWithFee.feeNanos + sumTransactionFees(params.TransactionFees),
            AssociationLimitMap: [
                {
                    AssociationClass: 'User',
                    AssociationType: params.AssociationType,
                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',
                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',
                    AssociationOperation: 'Create',
                    OpCount: options?.txLimitCount ?? 1,
                },
                // NOTE: This is a bit weird, but we don't have AppPublicKeyBase58Check
                // or AssociationType in the delete params, so we just ask for delete
                // permission at the same time the association is created.
                {
                    AssociationClass: 'User',
                    AssociationType: params.AssociationType,
                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',
                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',
                    AssociationOperation: 'Delete',
                    OpCount: options?.txLimitCount ?? 1,
                },
            ],
        });
    }
    return handleSignAndSubmit('api/v0/user-associations/create', params, {
        ...options,
        constructionFunction: constructCreateUserAssociationTransaction,
    });
};
const buildCreateUserAssociationMetadata = (params) => {
    const metadata = new TransactionMetadataCreateUserAssociation();
    metadata.appPublicKey = bs58PublicKeyToCompressedBytes(params.AppPublicKeyBase58Check || '');
    metadata.associationType = encodeUTF8ToBytes(params.AssociationType);
    metadata.associationValue = encodeUTF8ToBytes(params.AssociationValue);
    metadata.targetUserPublicKey = bs58PublicKeyToCompressedBytes(params.TargetUserPublicKeyBase58Check);
    return metadata;
};
export const constructCreateUserAssociationTransaction = (params) => {
    return constructBalanceModelTx(params.TransactorPublicKeyBase58Check, buildCreateUserAssociationMetadata(params), {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
export const deleteUserAssociation = async (params, options) => {
    return handleSignAndSubmit('api/v0/user-associations/delete', params, {
        ...options,
        constructionFunction: constructDeleteUserAssociationTransaction,
    });
};
const buildDeleteUserAssociationMetadata = (params) => {
    const metadata = new TransactionMetadataDeleteUserAssociation();
    metadata.associationID = encodeUTF8ToBytes(params.AssociationID);
    return metadata;
};
export const constructDeleteUserAssociationTransaction = (params) => {
    return constructBalanceModelTx(params.TransactorPublicKeyBase58Check, buildDeleteUserAssociationMetadata(params), {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
export const createPostAssociation = async (params, options) => {
    const txWithFee = getTxWithFeeNanos(params.TransactorPublicKeyBase58Check, buildCreatePostAssociationMetadata(params), {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
    if (options?.checkPermissions !== false) {
        await guardTxPermission({
            GlobalDESOLimit: txWithFee.feeNanos + sumTransactionFees(params.TransactionFees),
            AssociationLimitMap: [
                {
                    AssociationClass: 'Post',
                    AssociationType: params.AssociationType,
                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',
                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',
                    AssociationOperation: 'Create',
                    OpCount: options?.txLimitCount ?? 1,
                },
                // NOTE: This is a bit weird, but we don't have AppPublicKeyBase58Check
                // or AssociationType in the delete params, so we just ask for delete
                // permission at the same time the association is created.
                {
                    AssociationClass: 'Post',
                    AssociationType: params.AssociationType,
                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',
                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',
                    AssociationOperation: 'Delete',
                    OpCount: options?.txLimitCount ?? 1,
                },
            ],
        });
    }
    return handleSignAndSubmit('api/v0/post-associations/create', params, {
        ...options,
        constructionFunction: constructCreatePostAssociationTransaction,
    });
};
const buildCreatePostAssociationMetadata = (params) => {
    const metadata = new TransactionMetadataCreatePostAssociation();
    metadata.appPublicKey = bs58PublicKeyToCompressedBytes(params.AppPublicKeyBase58Check || '');
    metadata.associationType = encodeUTF8ToBytes(params.AssociationType);
    metadata.associationValue = encodeUTF8ToBytes(params.AssociationValue);
    metadata.postHash = hexToBytes(params.PostHashHex);
    return metadata;
};
export const constructCreatePostAssociationTransaction = (params) => {
    return constructBalanceModelTx(params.TransactorPublicKeyBase58Check, buildCreatePostAssociationMetadata(params), {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
export const deletePostAssociation = (params, options) => {
    return handleSignAndSubmit('api/v0/post-associations/delete', params, {
        ...options,
        constructionFunction: constructDeletePostAssociationTransaction,
    });
};
export const constructDeletePostAssociationTransaction = (params) => {
    const metadata = new TransactionMetadataDeletePostAssociation();
    metadata.associationID = encodeUTF8ToBytes(params.AssociationID);
    return constructBalanceModelTx(params.TransactorPublicKeyBase58Check, metadata, {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
    });
};
//# sourceMappingURL=data:application/json;base64,