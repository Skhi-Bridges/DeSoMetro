import { api, cleanURL, media, } from './data/index.js';
import { TransactionExtraDataKV, TransactionMetadataUpdateGlobalParams, encodeUTF8ToBytes, identity, uvarint64ToBuf, } from './identity/index.js';
import { constructBalanceModelTx, handleSignAndSubmit } from './internal.js';
const jwtPost = async (endpoint, params = {}, options) => {
    const isAdminRequest = endpoint.includes('api/v0/admin');
    let AdminPublicKey = '';
    if (isAdminRequest) {
        const { currentUser } = await identity.snapshot();
        if (!currentUser) {
            throw new Error('Cannot issue an admin request without a logged in user');
        }
        AdminPublicKey = currentUser.publicKey;
    }
    const postParams = {
        ...params,
        ...(isAdminRequest && { AdminPublicKey }),
        JWT: params.JWT ?? (await identity.jwt()),
    };
    if (options?.broadcast) {
        return handleSignAndSubmit(endpoint, postParams, options);
    }
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, postParams);
};
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-global-metadata-email-and-phone-number
 */
export const getUserGlobalMetadata = async (params, options) => {
    return jwtPost('api/v0/get-user-global-metadata', params, options);
};
export const updateUserGlobalMetadata = async (params, options) => {
    return jwtPost('api/v0/update-user-global-metadata', params, options);
};
/**
 * https://docs.deso.org/deso-backend/api/user-endpoints#delete-pii-personal-identifiable-information
 */
export const deletePII = async (params, options) => {
    return jwtPost('api/v0/delete-pii', params, options);
};
export const blockPublicKey = async (params, options) => {
    return jwtPost('api/v0/block-public-key', params, options);
};
/**
 * https://docs.deso.org/deso-backend/api/notification-endpoints#set-notification-metadata
 */
export const setNotificationMetadata = async (params, options) => {
    return jwtPost('api/v0/set-notification-metadata', params, options);
};
///////////////////////////////////////////////////////////////////////////////
// Admin endpoints
///////////////////////////////////////////////////////////////////////////////
/**
 * https://docs.deso.org/deso-backend/api/admin-endpoints#get-verified-users
 */
export const adminGetVerifiedUsers = (options) => {
    return jwtPost('api/v0/admin/get-verified-users', {}, options);
};
/**
 * https://docs.deso.org/deso-backend/api/admin-endpoints#get-username-verification-audit-logs
 */
export const adminGetUsernameVerificationAuditLog = (params, options) => {
    return jwtPost('api/v0/admin/get-username-verification-audit-log', params, options);
};
export const adminNodeControl = (params, options) => {
    return jwtPost('api/v0/admin/node-control', params, options);
};
export const adminGrantVerificationBadge = (params, options) => {
    return jwtPost('api/v0/admin/grant-verification-badge', params, options);
};
export const adminRemoveVerificationBadge = (params, options) => {
    return jwtPost('api/v0/admin/remove-verification-badge', params, options);
};
export const adminGetUserAdminData = (params, options) => {
    return jwtPost('api/v0/admin/get-user-admin-data', params, options);
};
export const adminGetUserGlobalMetadata = (params, options) => {
    return jwtPost('api/v0/admin/get-user-global-metadata', params, options);
};
export const adminUpdateUserGlobalMetadata = (params, options) => {
    return jwtPost('api/v0/admin/update-user-global-metadata', params, options);
};
export const adminGetAllUserGlobalMetadata = (params, options) => {
    return jwtPost('api/v0/admin/get-all-user-global-metadata', params, options);
};
export const adminPinPost = (params, options) => {
    return jwtPost('api/v0/admin/pin-post', params, options);
};
export const adminUpdateGlobalFeed = (params, options) => {
    return jwtPost('api/v0/admin/update-global-feed', params, options);
};
export const adminRemoveNilPosts = (params, options) => {
    return jwtPost('api/v0/admin/remove-nil-posts', params, options);
};
export const adminReprocessBitcoinBlock = (blockHashOrBlockHeight, options) => {
    return jwtPost(`api/v0/admin/reprocess-bitcoin-block/${blockHashOrBlockHeight}`, {}, options);
};
export const adminGetMempoolStats = (options) => {
    return jwtPost('api/v0/admin/get-mempool-stats', {}, options);
};
export const adminSwapIdentity = async (params, options) => {
    return jwtPost('api/v0/admin/swap-identity', params, options);
};
export const adminSetUSDCentsToDESOReserveExchangeRate = (params, options) => {
    return jwtPost('api/v0/admin/set-usd-cents-to-deso-reserve-exchange-rate', params, options);
};
// Not a jwt request, but it's an admin endpoint so it's here...
export const adminGetUSDCentsToDESOReserveExchangeRate = (options) => {
    const endpoint = 'api/v0/admin/get-usd-cents-to-deso-reserve-exchange-rate';
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
export const adminSetBuyDesoFeeBasisPoints = (params, options) => {
    return jwtPost('api/v0/admin/set-buy-deso-fee-basis-points', params, options);
};
export const adminGetBuyDesoFeeBasisPoints = (options) => {
    const endpoint = 'api/v0/admin/get-buy-deso-fee-basis-points';
    return api.get(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint);
};
export const adminUpdateGlobalParams = async (params, options) => {
    return handleSignAndSubmit('api/v0/admin/update-global-params', params, {
        ...options,
        constructionFunction: constructAdminUpdateGlobalParamsTransaction,
    });
};
export const constructAdminUpdateGlobalParamsTransaction = async (params) => {
    const metadata = new TransactionMetadataUpdateGlobalParams();
    const consensusExtraDataKVs = [];
    if (params.USDCentsPerBitcoin >= 0) {
        consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('USDCentsPerBitcoin'), uvarint64ToBuf(params.USDCentsPerBitcoin)));
    }
    if (params.MinimumNetworkFeeNanosPerKB >= 0) {
        consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('MinNetworkFeeNanosPerKB'), uvarint64ToBuf(params.MinimumNetworkFeeNanosPerKB)));
    }
    if (params.CreateProfileFeeNanos >= 0) {
        consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('CreateProfileFeeNanos'), uvarint64ToBuf(params.CreateProfileFeeNanos)));
    }
    if (params.CreateNFTFeeNanos >= 0) {
        consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('CreateNFTFeeNanos'), uvarint64ToBuf(params.CreateNFTFeeNanos)));
    }
    if (params.MaxCopiesPerNFT >= 0) {
        consensusExtraDataKVs.push(new TransactionExtraDataKV(encodeUTF8ToBytes('MaxCopiesPerNFT'), uvarint64ToBuf(params.MaxCopiesPerNFT)));
    }
    return constructBalanceModelTx(params.UpdaterPublicKeyBase58Check, metadata, {
        ExtraData: params.ExtraData,
        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,
        TransactionFees: params.TransactionFees,
        ConsensusExtraDataKVs: consensusExtraDataKVs,
    });
};
export const adminGetGlobalParams = (options) => {
    return jwtPost('api/v0/admin/get-global-params', {}, options);
};
export const adminGetNFTDrop = (params, options) => {
    return jwtPost('api/v0/admin/get-nft-drop', params, options);
};
export const adminUpdateNFTDrop = (params, options) => {
    return jwtPost('/api/v0/admin/update-nft-drop', params, options);
};
export const adminGetUnfilteredHotFeed = (params, options) => {
    return jwtPost('api/v0/admin/get-unfiltered-hot-feed', params, options);
};
export const adminGetHotFeedAlgorithm = (options) => {
    return jwtPost('api/v0/admin/get-hot-feed-algorithm', {}, options);
};
export const adminUpdateHotFeedAlgorithm = (params, options) => {
    return jwtPost('api/v0/admin/update-hot-feed-algorithm', params, options);
};
export const adminUpdateHotFeedUserMultiplier = (params, options) => {
    return jwtPost('api/v0/admin/update-hot-feed-user-multiplier', params, options);
};
export const adminUpdateHotFeedPostMultiplier = (params, options) => {
    return jwtPost('api/v0/admin/update-hot-feed-post-multiplier', params, options);
};
export const adminGetHotFeedUserMultiplier = (params, options) => {
    return jwtPost('api/v0/admin/get-hot-feed-user-multiplier', params, options);
};
export const adminGetWyreWalletOrdersForUser = (params, options) => {
    return jwtPost('api/v0/admin/get-wyre-wallet-orders-for-public-key', params, options);
};
export const adminGetWyreWalletOrderQuotation = (params, options) => {
    return jwtPost('api/v0/admin/get-wyre-wallet-order-quotation', params, options);
};
export const adminGetWyreWalletOrderReservation = (params, options) => {
    return jwtPost('api/v0/admin/get-wyre-wallet-order-reservation', params, options);
};
export const resendVerifyEmail = (params, options) => {
    return jwtPost('api/v0/resend-verify-email', params, options);
};
export const verifyEmail = (params, options) => {
    const endpoint = 'api/v0/verify-email';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, params);
};
export const uploadImage = async (params, options) => {
    const JWT = params.JWT ?? (await identity.jwt());
    const endpoint = 'api/v0/upload-image';
    return api.post(options?.nodeURI ? cleanURL(options.nodeURI, endpoint) : endpoint, { JWT, ...params }, { contentType: 'multipart/form-data' });
};
export const uploadVideo = async (params) => {
    const JWT = params.JWT ?? (await identity.jwt());
    const endpoint = 'api/v0/upload-video';
    return media.post(endpoint, { JWT, ...params }, { contentType: 'multipart/form-data' });
};
//# sourceMappingURL=data:application/json;base64,