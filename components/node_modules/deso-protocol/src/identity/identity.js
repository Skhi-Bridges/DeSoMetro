var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Identity_instances, _Identity_window, _Identity_api, _Identity_identityURI, _Identity_network, _Identity_nodeURI, _Identity_identityPopupWindow, _Identity_redirectURI, _Identity_pendingWindowRequest, _Identity_defaultTransactionSpendingLimit, _Identity_appName, _Identity_jwtAlgorithm, _Identity_defaultGroupName, _Identity_boundPostMessageListener, _Identity_subscribers, _Identity_didConfigure, _Identity_isBrowser, _Identity_identityPresenter, _Identity_storageProvider, _Identity_showSkip, _Identity_isAutoDeriveLogin, _Identity_defaultNumDaysBeforeExpiration, _Identity_getState, _Identity_getActivePublicKey, _Identity_getUsers, _Identity_getCurrentUser, _Identity_queryETHRPC, _Identity_getETHTransactionsSignedByAddress, _Identity_authorizeDerivedKey, _Identity_setActiveUser, _Identity_getErrorType, _Identity_authorizePrimaryDerivedKey, _Identity_handlePostMessage, _Identity_handleIdentityResponse, _Identity_handleLoginMethod, _Identity_purgeUserDataForPublicKey, _Identity_handleDeriveMethod, _Identity_updateUser, _Identity_buildQueryParams, _Identity_openIdentityPopup, _Identity_launchIdentity, _Identity_getErrorInstance, _Identity_decryptGroupChat, _Identity_decryptDM;
import { keccak_256 } from '@noble/hashes/sha3';
import { Point, utils as ecUtils } from '@noble/secp256k1';
import { ethers } from 'ethers';
import { ChatType, } from '../backend-types/index.js';
import { DEFAULT_IDENTITY_URI, DEFAULT_NODE_URI, DEFAULT_PERMISSIONS as DEFAULT_TRANSACTION_SPENDING_LIMIT, DESO_NETWORK_TO_ETH_NETWORK, IDENTITY_SERVICE_VALUE, LOCAL_STORAGE_KEYS, } from './constants.js';
import { bs58PublicKeyToBytes, decrypt, decryptChatMessage, deriveAccessGroupKeyPair, encryptChatMessage, getSignedJWT, keygen, publicKeyToBase58Check, signTx, } from './crypto-utils.js';
import { generateDerivedKeyPayload } from './derived-key-utils.js';
import { ERROR_TYPES } from './error-types.js';
import { buildTransactionSpendingLimitResponse, compareTransactionSpendingLimits, } from './permissions-utils.js';
import { parseQueryParams } from './query-param-utils.js';
import { NOTIFICATION_EVENTS, } from './types.js';
export class Identity {
    /**
     * The configured nodeURI used for any network calls. Making this accessible
     * behind a getter ensures it is read-only and can only be set via the
     * configure call.
     */
    get nodeURI() {
        return __classPrivateFieldGet(this, _Identity_nodeURI, "f");
    }
    /**
     * The configured transaction spending limit values provided by the initial
     * configure call.  These can be used to determine the default tx limit count
     * to use if a derived key needs to be re-authorized.
     */
    get transactionSpendingLimitOptions() {
        return __classPrivateFieldGet(this, _Identity_defaultTransactionSpendingLimit, "f");
    }
    constructor(windowProvider, apiProvider) {
        _Identity_instances.add(this);
        /**
         * @private
         */
        _Identity_window.set(this, void 0);
        /**
         * @private
         */
        _Identity_api.set(this, void 0);
        /**
         * @private
         */
        _Identity_identityURI.set(this, DEFAULT_IDENTITY_URI);
        /**
         * @private
         */
        _Identity_network.set(this, 'mainnet');
        /**
         * @private
         */
        _Identity_nodeURI.set(this, DEFAULT_NODE_URI);
        /**
         * @private
         */
        _Identity_identityPopupWindow.set(this, void 0);
        /**
         * @private
         */
        _Identity_redirectURI.set(this, void 0);
        /**
         * @private
         */
        _Identity_pendingWindowRequest.set(this, void 0);
        /**
         * @private
         */
        _Identity_defaultTransactionSpendingLimit.set(this, DEFAULT_TRANSACTION_SPENDING_LIMIT);
        /**
         * @private
         */
        _Identity_appName.set(this, '');
        /**
         * @private
         */
        _Identity_jwtAlgorithm.set(this, 'ES256');
        /**
         * @private
         */
        _Identity_defaultGroupName.set(this, 'default-key');
        /**
         * @private
         */
        _Identity_boundPostMessageListener.set(this, void 0);
        /**
         * @private
         */
        _Identity_subscribers.set(this, []);
        /**
         * @private
         */
        _Identity_didConfigure.set(this, false);
        /**
         * @private
         */
        _Identity_isBrowser.set(this, void 0);
        /**
         * @private
         */
        _Identity_identityPresenter.set(this, void 0);
        /**
         * @private
         */
        _Identity_storageProvider.set(this, void 0);
        /**
         * @private
         */
        _Identity_showSkip.set(this, false);
        /**
         * @private
         */
        _Identity_isAutoDeriveLogin.set(this, false);
        /**
         * Defaults to 10 years. These login keys should essentially never expire
         * unless a user explicitly de-authorizes them.
         * @private
         */
        _Identity_defaultNumDaysBeforeExpiration.set(this, 3650);
        __classPrivateFieldSet(this, _Identity_window, windowProvider, "f");
        __classPrivateFieldSet(this, _Identity_api, apiProvider, "f");
        __classPrivateFieldSet(this, _Identity_isBrowser, typeof windowProvider.location !== 'undefined', "f");
        __classPrivateFieldSet(this, _Identity_storageProvider, globalThis.localStorage, "f");
        if (__classPrivateFieldGet(this, _Identity_isBrowser, "f") && __classPrivateFieldGet(this, _Identity_window, "f").location.search) {
            this.handleRedirectURI(__classPrivateFieldGet(this, _Identity_window, "f").location.search);
        }
    }
    /**
     * Configures the identity instance. This should be called before any other
     * method calls, ideally before any app code is run.  The most important
     * configuration options are `spendingLimitOptions` and `appName`.
     * `spendingLimitOptions` is used to determine the default permissions that a
     * user will be asked to approve when logging into an app. `appName` is used
     * to identity derived keys issued by an app.
     *
     * See more about the spending limit options object here
     * https://docs.deso.org/for-developers/backend/blockchain-data/basics/data-types#transactionspendinglimitresponse
     *
     * And See an exhaustive list of transaction types here:
     * https://github.com/deso-protocol/core/blob/a836e4d2e92f59f7570c7a00f82a3107ec80dd02/lib/network.go#L244
     *
     * @example
     * ```typescript
     * import { identity } from '@deso/identity';
     *
     * identity.configure({
     *   spendingLimitOptions: {
     *     // NOTE: this value is in Deso nanos, 1000000000 nanos (or 1e9) = 1 Deso
     *     GlobalDESOLimit: 1 * 1e9 // 1 Deso
     *     // Map of transaction type to the number of times this derived key is
     *     // allowed to perform this operation on behalf of the owner public key
     *     TransactionCountLimitMap: {
     *       BASIC_TRANSFER: 2, // 2 basic transfer transactions are authorized
     *       SUBMIT_POST: 'UNLIMITED', // unlimited submit post transactions are authorized
     *     },
     *   }
     * });
     * ```
     */
    configure({ identityURI = DEFAULT_IDENTITY_URI, network = 'mainnet', nodeURI = 'https://node.deso.org', spendingLimitOptions = DEFAULT_TRANSACTION_SPENDING_LIMIT, redirectURI, jwtAlgorithm = 'ES256', appName = '', storageProvider, identityPresenter, showSkip, }) {
        __classPrivateFieldSet(this, _Identity_identityURI, identityURI, "f");
        __classPrivateFieldSet(this, _Identity_network, network, "f");
        __classPrivateFieldSet(this, _Identity_nodeURI, nodeURI, "f");
        __classPrivateFieldSet(this, _Identity_redirectURI, redirectURI, "f");
        __classPrivateFieldSet(this, _Identity_jwtAlgorithm, jwtAlgorithm, "f");
        __classPrivateFieldSet(this, _Identity_appName, appName, "f");
        __classPrivateFieldSet(this, _Identity_identityPresenter, identityPresenter, "f");
        __classPrivateFieldSet(this, _Identity_showSkip, !!showSkip, "f");
        if (storageProvider) {
            __classPrivateFieldSet(this, _Identity_storageProvider, storageProvider, "f");
        }
        if (!__classPrivateFieldGet(this, _Identity_didConfigure, "f")) {
            __classPrivateFieldSet(this, _Identity_defaultTransactionSpendingLimit, buildTransactionSpendingLimitResponse(spendingLimitOptions), "f");
            if (__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
                // If we don't have a storage provider it means we are likely running in
                // a node environment (SSR, etc). In this case we will skip
                // refreshDerivedKeyPermissions since it relies on the storage provider.
                // Once the code executes in a UI environment, the storage provider
                // should be available and we can refresh the derived key permissions.
                this.refreshDerivedKeyPermissions();
            }
        }
        __classPrivateFieldSet(this, _Identity_didConfigure, true, "f");
    }
    /**
     * Allows listening to changes to identity state. The subscriber will be
     * called with the new state any time a user logs in, logs out, approves a
     * derived key, etc. Apps can use this to sync their state with the identity
     * instance such that their application reacts to changes and re-renders
     * accordingly.
     *
     * NOTE: This method could be very chatty. Depending on the needs of your
     * application, you may want to implement some caching or memoization to
     * reduce any unnecessary re-renders or network calls.
     *
     * @example
     * ```typescript
     * identity.subscribe(({ event, currentUser, alternateUsers }) => {
     *   if (event === NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_START) {
     *     // show a loading indicator while the underlying network call to authorize the derived key is made.
     *   }
     *
     *   if (event === NOTIFICATION_EVENTS.LOGIN_END) {
     *      // do something with currentUser
     *   }
     *
     *   // see and exhaustive list of events here: https://github.com/deso-protocol/deso-workspace/blob/a3c02742a342610bb6af8f2b1396d5430931cf41/libs/identity/src/lib/types.ts#L182
     * });
     * ```
     *
     * @param subscriber this is a callback that will be called with the current
     * state and the event that triggered the change.
     */
    async subscribe(subscriber) {
        __classPrivateFieldGet(this, _Identity_subscribers, "f").push(subscriber);
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event: NOTIFICATION_EVENTS.SUBSCRIBE, ...state }));
    }
    /**
     * Remove a subscriber so it no longer gets called when identity state changes.
     */
    unsubscribe(subscriber) {
        __classPrivateFieldSet(this, _Identity_subscribers, __classPrivateFieldGet(this, _Identity_subscribers, "f").filter((s) => s !== subscriber), "f");
    }
    /**
     * Returns the current underlying state of the identity instance. In general,
     * you should use the `subscribe` method to listen to changes to observe and
     * react to the state over time, but if you need a snapshot of the current
     * state you can use this method. Can be useful for debugging or setting up
     * initial state in your app.
     */
    snapshot() {
        return __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
    }
    /**
     * Starts a login flow. This will open a new window and prompt the user to
     * select an existing account or create a new account. If there is an error
     * during the login flow, the promise will reject with an error which you can
     * catch and handle in your app by showing some error feedback in the UI.
     *
     * @example
     * ```typescript
     * import { identity, ERROR_TYPES } from '@deso/identity';
     *
     *
     * await identity.login().catch((err) => {
     *   if (err.type === ERROR_TYPES.NO_MONEY) {
     *     // handle no money error
     *   } else {
     *     // handle other errors
     *   }
     * });
     * ```
     *
     * @returns returns a promise that resolves to the identity login
     * payload, or rejects if there was an error.
     */
    async login({ getFreeDeso = true, 
    // NOTE: derivedKeyLogin is the default and recommended login flow. We only
    // allow disabling it for simple "gated logins" where the app wants to gate
    // access to the app behind a login, but doesn't need to issue a derived key
    // for executing transactions on behalf of the user.
    derivedKeyLogin = true, } = {}) {
        if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
            throw new Error('No storage provider available. Did you forget to configure a custom storageProvider?');
        }
        const event = NOTIFICATION_EVENTS.LOGIN_START;
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event, ...state }));
        // This is to support "gated logins"
        // https://github.com/deso-protocol/deso-js/issues/1
        if (!derivedKeyLogin) {
            return new Promise((resolve, reject) => {
                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, { resolve, reject, event }, "f");
                __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_launchIdentity).call(this, 'log-in', {
                    accessLevelRequest: 2,
                    getFreeDeso,
                    showSkip: __classPrivateFieldGet(this, _Identity_showSkip, "f"),
                });
            });
        }
        let derivedPublicKey;
        const loginKeyPair = await __classPrivateFieldGet(this, _Identity_storageProvider, "f").getItem(LOCAL_STORAGE_KEYS.loginKeyPair);
        if (loginKeyPair) {
            derivedPublicKey = JSON.parse(loginKeyPair).publicKey;
        }
        else {
            const keys = keygen();
            derivedPublicKey = publicKeyToBase58Check(keys.public, {
                network: __classPrivateFieldGet(this, _Identity_network, "f"),
            });
            await __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.loginKeyPair, JSON.stringify({
                publicKey: derivedPublicKey,
                seedHex: keys.seedHex,
            }));
        }
        return await new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _Identity_pendingWindowRequest, { resolve, reject, event }, "f");
            const authenticatedUserKeys = [];
            if (state.currentUser?.primaryDerivedKey) {
                authenticatedUserKeys.push(state.currentUser?.publicKey);
            }
            const alternateUsers = state.alternateUsers ?? {};
            Object.keys(alternateUsers).forEach((key) => {
                if (alternateUsers[key]?.primaryDerivedKey) {
                    authenticatedUserKeys.push(key);
                }
            });
            const identityParams = {
                derive: true,
                derivedPublicKey,
                transactionSpendingLimitResponse: __classPrivateFieldGet(this, _Identity_defaultTransactionSpendingLimit, "f"),
                expirationDays: __classPrivateFieldGet(this, _Identity_defaultNumDaysBeforeExpiration, "f"),
                showSkip: __classPrivateFieldGet(this, _Identity_showSkip, "f"),
                ...(authenticatedUserKeys.length && {
                    authenticatedUsers: authenticatedUserKeys.join(','),
                }),
            };
            if (getFreeDeso) {
                identityParams.getFreeDeso = true;
            }
            __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_launchIdentity).call(this, 'derive', identityParams);
        });
    }
    /**
     * @param ownerSeedHex This is the seed hex of the owner key. This must be provided by the app.
     * @param options.derivedSeedHex This is optional and primarily only used for testing. If not provided, a new random derived key will be generated.
     */
    async loginWithAutoDerive(ownerSeedHex, { derivedSeedHex } = {}) {
        const event = NOTIFICATION_EVENTS.LOGIN_START;
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event, ...state }));
        const ownerKeys = keygen(ownerSeedHex);
        const derivedKeys = keygen(derivedSeedHex);
        const derivedPublicKeyBase58 = publicKeyToBase58Check(derivedKeys.public, {
            network: __classPrivateFieldGet(this, _Identity_network, "f"),
        });
        // When the derived payload is handled, we look at local storage to see if
        // this is a login derived key, so we need to set this before we handle the response.
        await __classPrivateFieldGet(this, _Identity_storageProvider, "f")?.setItem(LOCAL_STORAGE_KEYS.loginKeyPair, JSON.stringify({
            publicKey: derivedPublicKeyBase58,
            seedHex: derivedKeys.seedHex,
        }));
        const payload = await generateDerivedKeyPayload(ownerKeys, derivedKeys, __classPrivateFieldGet(this, _Identity_defaultTransactionSpendingLimit, "f"), __classPrivateFieldGet(this, _Identity_defaultNumDaysBeforeExpiration, "f"), __classPrivateFieldGet(this, _Identity_network, "f"));
        return new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _Identity_pendingWindowRequest, { resolve, reject, event }, "f");
            // NOTE: We set this flag so that when the identity response is handled,
            // we know to let the login flow continue even if the user has no money to
            // authorize the key. It's up to the app to handle how the user gets
            // money, after which they can re-attempt to authorize the key.
            __classPrivateFieldSet(this, _Identity_isAutoDeriveLogin, true, "f");
            __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_handleIdentityResponse).call(this, {
                service: 'identity',
                method: 'derive',
                payload,
            });
        });
    }
    /**
     * Starts a logout flow. This will open a new window and prompt the user to
     * confirm they want to logout. Similar to the login flow, if there is an error
     * the returned promise will reject with an error which you can catch and handle.
     *
     * @example
     * ```typescript
     * import { identity } from '@deso/identity';
     *
     *
     * await identity.logout().catch((err) => {
     *   // handle errors
     * });
     * ```
     *
     * @returns returns a promise that resolves to undefined, or rejects if there
     * was an error.
     */
    async logout() {
        const event = NOTIFICATION_EVENTS.LOGOUT_START;
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event, ...state }));
        return new Promise((resolve, reject) => {
            const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this);
            const launchIdentity = (activePublicKey) => {
                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, { resolve, reject, event }, "f");
                if (!activePublicKey) {
                    __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f").reject(new Error('cannot logout without an active public key'));
                }
                else {
                    __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_launchIdentity).call(this, 'logout', { publicKey: activePublicKey });
                }
            };
            // NOTE: in the case of a browser context, we are using synchronous local
            // storage, We cannot introduce any async operations because it may
            // trigger popup blockers, which is why we need to branch the logic like
            // this.
            if (typeof activePublicKey === 'string' || activePublicKey === null) {
                launchIdentity(activePublicKey);
            }
            else {
                activePublicKey?.then(launchIdentity);
            }
        });
    }
    /**
     * Signs a transaction hex using the derived key issued to the currently
     * active user when they logged into an application. The `TransactionHex`
     * parameter should come from a transaction object returned from a transaction
     * construction endpoint, such as the `submit-post` endpoint of the DeSo
     * backend api.
     *
     * We return a signed transaction hex value that can be used to submit a
     * transaction to the network for confirmation. This method is used internally
     * by the signAndSubmit method, which is a convenience method to sign and
     * submit a transaction in a single step. It can also be used as a standalone
     * method if you want to sign a transaction and submit it yourself.
     *
     *
     * @example
     * ```typescript
     * const signedTxHex = await identity.signTx(txHex);
     * ```
     */
    async signTx(TransactionHex) {
        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (!primaryDerivedKey?.derivedSeedHex) {
            // This *should* never happen, but just in case we throw here to surface any bugs.
            throw new Error('Cannot sign transaction without a derived seed hex');
        }
        return await signTx(TransactionHex, primaryDerivedKey.derivedSeedHex, {
            isDerivedKey: true,
        });
    }
    /**
     * Submits a signed transaction to the network for confirmation. NOTE: you
     * must sign a transaction before submitting it. This method is used
     * internally by the `signAndSubmit` method, which is a convenience method to
     * sign and submit a transaction in a single step.
     *
     * @example
     * ```typescript
     * const submittedTx = await identity.submitTx(signedTxHex);
     * ```
     */
    async submitTx(TransactionHex) {
        const res = await __classPrivateFieldGet(this, _Identity_api, "f").post(`${__classPrivateFieldGet(this, _Identity_nodeURI, "f")}/api/v0/submit-transaction`, {
            TransactionHex,
        });
        this.refreshDerivedKeyPermissions();
        return res;
    }
    /**
     * This is a convenience method to sign and submit a transaction in a single
     * step. It receives a transaction object and signs it using the derived key
     * issued to the currently logged in user. This can be chained with
     * transaction construction promises that return a transaction object such as
     * a promise that wraps the call to the `submit-post` endpoint of the DeSo
     * backend api.
     *
     * @example
     * ```typescript
     * const transactionObject = await myApiClient.post('https://node.deso.org/api/v0/submit-post', { ...data });
     *
     * await identity.signAndSubmit(transactionObject);
     * ```
     */
    async signAndSubmit(tx) {
        return await this.submitTx(await this.signTx(tx.TransactionHex));
    }
    /**
     * @deprecated Use signAndSubmit instead. Since we don't support unauthorized
     * keys anymore, this is no longer necessary. It's only purpose was to
     * authorize a derived key if it wasn't already authorized and retry the
     * transaction.
     *
     * @param constructTx generic function for constructing a transaction. Should
     * return a promise that resolves to a transaction object.
     * @returns
     */
    async signAndSubmitTx(constructTx) {
        try {
            const tx = await constructTx();
            return await this.submitTx(await this.signTx(tx.TransactionHex));
        }
        catch (e) {
            // if the derived key is not authorized, authorize it and try again
            if (e?.message?.includes('RuleErrorDerivedKeyNotAuthorized')) {
                const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
                if (primaryDerivedKey == null) {
                    throw new Error('Cannot authorize derived key without a logged in user');
                }
                // if the derived key is not authorized
                // we try to authorize it and retry
                await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_authorizePrimaryDerivedKey).call(this, primaryDerivedKey.publicKeyBase58Check);
                // reconstruct the original transaction and try again
                // this will throw if the previous authorization failed
                const tx = await constructTx();
                return await this.submitTx(await this.signTx(tx.TransactionHex));
            }
            // just rethrow unexpected errors
            throw e;
        }
    }
    /**
     * Encrypt an arbitrary string using the recipient's
     * public key.
     *
     * @example
     * ```typescript
     * const message = "Hi, this is my first encrypted message!";
     *
     * const cipherText = await identity.encryptMessage(
     *   recipientPublicKeyBase58Check,
     *   message
     * );
     * ```
     */
    async encryptMessage(recipientPublicKeyBase58Check, messagePlainText) {
        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (!primaryDerivedKey?.messagingPrivateKey) {
            // This *should* never happen, but just in case we throw here to surface any bugs.
            throw new Error('Cannot encrypt message without a private messaging key');
        }
        return await encryptChatMessage(primaryDerivedKey.messagingPrivateKey, recipientPublicKeyBase58Check, messagePlainText);
    }
    /**
     * @param message This is a message object returned any of the messages
     * endpoints of the DeSo backend api, could be a DM or a Group message.
     * @param groups This is an array of group chats the user belongs to. This is
     * required to decrypt group messages.
     * @returns
     */
    async decryptMessage(message, groups) {
        const { primaryDerivedKey, publicKey: userPublicKeyBase58Check } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (!(primaryDerivedKey?.messagingPrivateKey && userPublicKeyBase58Check)) {
            // This *should* never happen, but just in case we throw here to surface any bugs.
            throw new Error('Cannot decrypt messages without a logged in user');
        }
        const isSender = message.SenderInfo.OwnerPublicKeyBase58Check ===
            userPublicKeyBase58Check &&
            (message.SenderInfo.AccessGroupKeyName === __classPrivateFieldGet(this, _Identity_defaultGroupName, "f") ||
                !message.SenderInfo.AccessGroupKeyName);
        let DecryptedMessage = '';
        let errorMsg = '';
        switch (message.ChatType) {
            case ChatType.DM:
                if (message.MessageInfo?.ExtraData?.unencrypted) {
                    DecryptedMessage = unencryptedHexToPlainText(message.MessageInfo.EncryptedText);
                }
                else {
                    try {
                        DecryptedMessage = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_decryptDM).call(this, userPublicKeyBase58Check, primaryDerivedKey.messagingPrivateKey, message, isSender);
                    }
                    catch (e) {
                        errorMsg = e?.toString() ?? 'Could not decrypt direct message';
                    }
                }
                break;
            case ChatType.GROUPCHAT:
                try {
                    DecryptedMessage = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_decryptGroupChat).call(this, groups, message);
                }
                catch (e) {
                    errorMsg = e?.toString() ?? 'Could not decrypt group message';
                }
                break;
            default:
                // If we add new chat types, we need to add explicit support for them.
                throw new Error(`unsupported chat type: ${message.ChatType}`);
        }
        return {
            ...message,
            ...{ DecryptedMessage, IsSender: isSender, error: errorMsg },
        };
    }
    /**
     * Decrypts the encrypted access group private key that we will need to use to decrypt group messages.
     *
     * @param encryptedKeyHex
     * @returns returns a promise that resolves t the decrypted key pair.
     */
    async decryptAccessGroupKeyPair(encryptedKeyHex) {
        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (!primaryDerivedKey?.messagingPrivateKey) {
            // This *should* never happen, but just in case we throw here to surface any bugs.
            throw new Error('Cannot encrypt message without a private messaging key');
        }
        const decryptedPrivateKeyHex = await decrypt(primaryDerivedKey.messagingPrivateKey, encryptedKeyHex);
        return keygen(decryptedPrivateKeyHex);
    }
    /**
     * Generate a key pair for an access group. This is used to encrypt and
     * decrypt group messages.
     *
     * @param groupName the plaintext name of the group chat
     * @param options.messagingPrivateKey the optional messaging private key
     * @returns a promise that resolves to the new key info.
     */
    async accessGroupStandardDerivation(groupName) {
        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (!primaryDerivedKey?.messagingPrivateKey) {
            // This *should* never happen, but just in case we throw here to surface any bugs.
            throw new Error('Cannot derive access group without a messaging key');
        }
        const keys = deriveAccessGroupKeyPair(primaryDerivedKey?.messagingPrivateKey, groupName);
        const publicKeyBase58Check = publicKeyToBase58Check(keys.public, {
            network: __classPrivateFieldGet(this, _Identity_network, "f"),
        });
        return {
            AccessGroupPrivateKeyHex: keys.seedHex,
            AccessGroupPublicKeyBase58Check: publicKeyBase58Check,
            AccessGroupKeyName: groupName,
        };
    }
    /**
     * Get a jwt token signed by the derived key issued to the currently active user. This can be used to pass to
     * authenticated endpoints on the DeSo backend api or to create authenticated endpoints on your own backend.
     * Typically this will be used to construct an Authorization header or pass as a parameter in a post body.
     *
     * @example
     * ```typescript
     * const token = await identity.jwt();
     *
     * const authHeaders = {
     *   Authorization: `Bearer ${token}`,
     * }
     *
     * myApiClient.post('https://myapi.com/some-authenticated-endpoint', { ...data }, { headers: authHeaders });
     * ```
     */
    async jwt() {
        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (!primaryDerivedKey?.derivedSeedHex) {
            // This *should* never happen, but just in case we throw here to surface any bugs.
            throw new Error('Cannot sign jwt without a derived seed hex');
        }
        return await getSignedJWT(primaryDerivedKey.derivedSeedHex, __classPrivateFieldGet(this, _Identity_jwtAlgorithm, "f"), {
            derivedPublicKeyBase58Check: primaryDerivedKey.derivedPublicKeyBase58Check,
            expiration: 60 * 10,
        });
    }
    /**
     * This method will open a new identity window with a options for getting deso
     * by verifying a phone number or buying/transferring deso anonymously for the
     * currently logged in user. NOTE: A user must already be logged in to use
     * this method.
     *
     * @example
     * ```typescript
     * await identity.getDeso();
     * ```
     */
    async getDeso() {
        const event = NOTIFICATION_EVENTS.GET_FREE_DESO_START;
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event, ...state }));
        return await new Promise((resolve, reject) => {
            const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this);
            const launchIdentity = (activePublicKey) => {
                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, { resolve, reject, event }, "f");
                if (!activePublicKey) {
                    __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f").reject(new Error('Cannot get free deso without a logged in user'));
                    return;
                }
                __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_launchIdentity).call(this, 'get-deso', {
                    publicKey: activePublicKey,
                    getFreeDeso: true,
                    showSkip: __classPrivateFieldGet(this, _Identity_showSkip, "f"),
                });
            };
            // NOTE: in the case of a browser context, we are using synchronous local
            // storage, We cannot introduce any async operations because it may
            // trigger popup blockers, which is why we need to branch the logic like
            // this.
            if (typeof activePublicKey === 'string' || activePublicKey === null) {
                launchIdentity(activePublicKey);
            }
            else {
                activePublicKey?.then(launchIdentity);
            }
        });
    }
    /**
     * This method is very similar to getDeso, but it will only present the option
     * for verifying a phone number to get deso. Also requires a user to be logged in.
     *
     * @example
     * ```typescript
     * await identity.verifyPhoneNumber();
     * ```
     */
    async verifyPhoneNumber() {
        const event = NOTIFICATION_EVENTS.VERIFY_PHONE_NUMBER_START;
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event, ...state }));
        return await new Promise((resolve, reject) => {
            const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this);
            const launchIdentity = (activePublicKey) => {
                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, { resolve, reject, event }, "f");
                if (!activePublicKey) {
                    __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f").reject(new Error('Cannon verify phone number without an active user'));
                }
                __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_launchIdentity).call(this, 'verify-phone-number', {
                    public_key: activePublicKey,
                    showSkip: __classPrivateFieldGet(this, _Identity_showSkip, "f"),
                });
            };
            // NOTE: in the case of a browser context, we are using synchronous local
            // storage, We cannot introduce any async operations because it may
            // trigger popup blockers, which is why we need to branch the logic like
            // this.
            if (typeof activePublicKey === 'string' || activePublicKey === null) {
                launchIdentity(activePublicKey);
            }
            else {
                activePublicKey?.then(launchIdentity);
            }
        });
    }
    /**
     * This method will set the currently active user. This is useful for changing
     * accounts when a user has logged into an application with multiple accounts.
     * NOTE: This method will not trigger a login event, but, rather, it will do a
     * lookup on all the users that have already been logged in to find the user
     * with the matching public key.  If the key is not found, it will throw an
     * error. The users that are available to be set as active are provided via
     * the `alternateUsers` property on the state object.
     *
     * @example
     * ```typescript
     * identity.setActiveUser(someLoggedInPublicKey);
     * ```
     */
    setActiveUser(publicKey) {
        const maybePromise = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_setActiveUser).call(this, publicKey);
        if (typeof maybePromise?.then === 'function') {
            // we're in async storage mode
            return maybePromise.then(() => {
                const snapshotPromise = this.snapshot();
                return snapshotPromise.then((state) => {
                    this.refreshDerivedKeyPermissions();
                    __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
                        event: NOTIFICATION_EVENTS.CHANGE_ACTIVE_USER,
                        ...state,
                    }));
                });
            });
        }
        // sync storage
        const state = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        this.refreshDerivedKeyPermissions();
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
            event: NOTIFICATION_EVENTS.CHANGE_ACTIVE_USER,
            ...state,
        }));
        return undefined;
    }
    /**
     * Reloads the derived key permissions for the active user. NOTE: In general
     * consumers should not need to call this directly, but it is exposed for
     * advanced use cases. We call this internally any time derived key
     * permissions are updated, a transaction is submitted, or the logged in user
     * changes.
     * @returns void
     */
    async refreshDerivedKeyPermissions() {
        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (primaryDerivedKey == null ||
            primaryDerivedKey.derivedKeyRegistered === false) {
            // if we don't have a logged in user, we just bail
            return;
        }
        try {
            const resp = await __classPrivateFieldGet(this, _Identity_api, "f").get(`${__classPrivateFieldGet(this, _Identity_nodeURI, "f")}/api/v0/get-single-derived-key/${primaryDerivedKey.publicKeyBase58Check}/${primaryDerivedKey.derivedPublicKeyBase58Check}`);
            await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_updateUser).call(this, primaryDerivedKey.publicKeyBase58Check, {
                primaryDerivedKey: {
                    ...primaryDerivedKey,
                    transactionSpendingLimits: resp.DerivedKey?.TransactionSpendingLimit ?? null,
                    IsValid: !!resp.DerivedKey?.IsValid,
                },
            });
        }
        catch (e) {
            // TODO: handle this better?
            if (__classPrivateFieldGet(this, _Identity_window, "f").location.hostname === 'localhost') {
                console.error(e);
            }
        }
    }
    /**
     * Use this in a browser context where localStorage is used as the storage
     * provider, and it is necessary to check permissions synchronously to prevent
     * issues with pop up blockers. If a user's derived key has the permissions to
     * perform a given action or batch of actions. The permissions are passed in
     * as an object with the same shape as the
     * `TransactionSpendingLimitResponseOptions` type, which is the same as the
     * `spendingLimitOptions` passed to the configure method.
     *
     *
     * @example
     * Here we check if the user has the permissions to submit at least 1 post.
     *
     * ```typescript
     * const hasPermissions = identity.hasPermissions({
     *   TransactionCountLimitMap: {
     *     SUBMIT_POST: 1,
     *    },
     * });
     * ```
     */
    hasPermissions(permissionsToCheck) {
        if (Object.keys(permissionsToCheck).length === 0) {
            throw new Error('You must pass at least one permission to check');
        }
        const users = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getUsers).call(this);
        const checkPermissions = (users, activeKey) => {
            if (!(users && activeKey)) {
                return false;
            }
            const activeUser = users[activeKey];
            const { primaryDerivedKey } = activeUser ?? {};
            // If the key is expired, unauthorized, or has no money we can't do anything with it
            if (!primaryDerivedKey?.IsValid ||
                primaryDerivedKey?.derivedKeyRegistered === false) {
                return false;
            }
            // if the key has no spending limits, we can't do anything with it
            if (!primaryDerivedKey?.transactionSpendingLimits) {
                return false;
            }
            return compareTransactionSpendingLimits(permissionsToCheck, primaryDerivedKey.transactionSpendingLimits);
        };
        if (typeof users?.then === 'function') {
            // async mode
            return Promise.all([users, __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this)]).then(([users, activeKey]) => checkPermissions(users, activeKey));
        }
        else {
            // sync mode
            const activeKey = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this);
            return checkPermissions(users, activeKey);
        }
    }
    /**
     * This method will request permissions from the user to perform an action or
     * batch of actions. It will open an identity window and prompt the user to
     * approve the permissions requested. It also takes a
     * `TransactionSpendingLimitResponseOptions` object.
     *
     * @example
     *
     * ```typescript
     * await identity.requestPermissions({
     *   TransactionCountLimitMap: {
     *     SUBMIT_POST: 'UNLIMITED',
     *    },
     * });
     * ```
     */
    async requestPermissions(transactionSpendingLimitResponse) {
        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
        if (primaryDerivedKey == null) {
            throw new Error('Cannot request permissions without a logged in user');
        }
        const { publicKeyBase58Check, derivedPublicKeyBase58Check } = primaryDerivedKey;
        return await this.derive(transactionSpendingLimitResponse, {
            ownerPublicKey: publicKeyBase58Check,
            derivedPublicKey: derivedPublicKeyBase58Check,
            expirationDays: __classPrivateFieldGet(this, _Identity_defaultNumDaysBeforeExpiration, "f"),
        });
    }
    /**
     * This method will issue a derive request to identity which can be used to
     * either create a new derived key or to update an existing derived key.  It
     * will open an identity window and prompt the user to approve the action for
     * the derived key. It optionally take an existing derived key and/or an owner
     * public key. If the owner key is not provided, the user will first be asked
     * to login or create an account. Otherwise the user will be prompted with the
     * derived key approval window immediately. If a derived key is not provided,
     * a new one will be created.
     *
     * @example
     *
     * ```typescript
     * await identity.derive({
     *   TransactionCountLimitMap: {
     *     SUBMIT_POST: 'UNLIMITED',
     *    },
     * }, {
     * });
     * ```
     */
    async derive(transactionSpendingLimitResponse, options) {
        const event = NOTIFICATION_EVENTS.REQUEST_PERMISSIONS_START;
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event, ...state }));
        return await new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _Identity_pendingWindowRequest, { resolve, reject, event }, "f");
            const params = {
                derive: true,
                ...(!!options?.derivedPublicKey && {
                    derivedPublicKey: options.derivedPublicKey,
                }),
                ...(!!options?.expirationDays && {
                    expirationDays: options.expirationDays,
                }),
                ...(!!options?.deleteKey && {
                    deleteKey: options.deleteKey,
                }),
                ...(!!options?.ownerPublicKey && { publicKey: options.ownerPublicKey }),
                transactionSpendingLimitResponse: buildTransactionSpendingLimitResponse(transactionSpendingLimitResponse),
                showSkip: __classPrivateFieldGet(this, _Identity_showSkip, "f"),
            };
            __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_launchIdentity).call(this, 'derive', params);
        });
    }
    desoAddressToEthereumAddress(address) {
        const desoPKBytes = bs58PublicKeyToBytes(address).slice(1);
        const ethPKHex = ecUtils.bytesToHex(keccak_256(desoPKBytes)).slice(24);
        // EIP-55 requires a checksum. Reference implementation: https://eips.ethereum.org/EIPS/eip-55
        const checksum = ecUtils.bytesToHex(keccak_256(ethPKHex));
        return Array.from(ethPKHex).reduce((ethAddress, char, index) => ethAddress +
            (parseInt(checksum[index], 16) >= 8 ? char.toUpperCase() : char), '0x');
    }
    // TODO: make sure this works and write a test for it...
    async ethereumAddressToDesoAddress(address) {
        if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
            throw new Error('Invalid Ethereum address');
        }
        const transactions = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getETHTransactionsSignedByAddress).call(this, address);
        if (transactions.length === 0) {
            throw new Error(`ETH address must sign at least one transaction in order to recover its public key: ${address}`);
        }
        const ethNet = DESO_NETWORK_TO_ETH_NETWORK[__classPrivateFieldGet(this, _Identity_network, "f")];
        let ethereumPublicKey = '';
        for (const { hash } of transactions) {
            try {
                const resp = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_queryETHRPC).call(this, {
                    Method: 'eth_getTransactionByHash',
                    Params: [hash],
                    UseNetwork: ethNet,
                });
                const txn = resp.result;
                const signature = ethers.utils.joinSignature({
                    r: txn.r,
                    s: txn.s,
                    v: parseInt(txn.v, 16),
                });
                // Special thanks for this answer on ethereum.stackexchange.com: https://ethereum.stackexchange.com/a/126308
                let txnData;
                // TODO: figure out how to handle AccessList (type 1) transactions.
                switch (parseInt(txn.type, 16)) {
                    case 0:
                        txnData = {
                            gasPrice: txn.gasPrice,
                            gasLimit: txn.gas,
                            value: txn.value,
                            nonce: parseInt(txn.nonce, 16),
                            data: txn.input,
                            chainId: parseInt(txn.chainId ? txn.chainId : ethNet === 'goerli' ? '0x5' : '0x1', 16),
                            to: txn.to,
                        };
                        break;
                    case 2:
                        txnData = {
                            gasLimit: txn.gas,
                            value: txn.value,
                            nonce: parseInt(txn.nonce, 16),
                            data: txn.input,
                            chainId: parseInt(txn.chainId ? txn.chainId : ethNet === 'goerli' ? '0x5' : '0x1', 16),
                            to: txn.to,
                            type: 2,
                            maxFeePerGas: txn.maxFeePerGas,
                            maxPriorityFeePerGas: txn.maxPriorityFeePerGas,
                        };
                        break;
                    default:
                        throw new Error('Unsupported txn type');
                }
                const rstxn = await ethers.utils.resolveProperties(txnData);
                const raw = ethers.utils.serializeTransaction(rstxn); // returns RLP encoded transactionHash
                const msgHash = ethers.utils.keccak256(raw); // as specified by ECDSA
                const msgBytes = ethers.utils.arrayify(msgHash); // create binary hash
                const recoveredPubKey = ethers.utils.recoverPublicKey(msgBytes, signature);
                const recoveredAddress = ethers.utils.computeAddress(recoveredPubKey);
                if (recoveredAddress.toLowerCase() !== address.toLowerCase()) {
                    throw new Error(`recovered address ${recoveredAddress} does not match expected address ${address}`);
                }
                ethereumPublicKey = recoveredPubKey.slice(2);
                // break out of the loop for the first successful recovery
                break;
            }
            catch (e) {
                // log the error but keep looking
                console.error(`error recovering public key from txn: ${hash}`, e);
            }
        }
        if (!ethereumPublicKey) {
            throw new Error(`failed to recover public key for eth address: ${address}`);
        }
        const compressedEthKey = Point.fromHex(ethereumPublicKey).toRawBytes(true);
        return publicKeyToBase58Check(compressedEthKey, { network: __classPrivateFieldGet(this, _Identity_network, "f") });
    }
    /**
     * Method to handle the redirect URI from the identity service. Typically this
     * would be useful in a mobile context where the user is redirected back to
     * the app after completing the identity flow.
     */
    handleRedirectURI(redirectURI) {
        // Check if the URL contains identity query params at startup
        const query = redirectURI.split('?')[1];
        const queryParams = new URLSearchParams(query);
        if (queryParams.get('service') === IDENTITY_SERVICE_VALUE) {
            const initialResponse = parseQueryParams(queryParams);
            // Strip the identity query params from the URL. replaceState removes it from browser history
            __classPrivateFieldGet(this, _Identity_window, "f").history?.replaceState({}, '', __classPrivateFieldGet(this, _Identity_window, "f").location.pathname);
            __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_handleIdentityResponse).call(this, initialResponse);
        }
        setTimeout(() => {
            if (!__classPrivateFieldGet(this, _Identity_didConfigure, "f")) {
                this.refreshDerivedKeyPermissions();
            }
        }, 50);
    }
}
_Identity_window = new WeakMap(), _Identity_api = new WeakMap(), _Identity_identityURI = new WeakMap(), _Identity_network = new WeakMap(), _Identity_nodeURI = new WeakMap(), _Identity_identityPopupWindow = new WeakMap(), _Identity_redirectURI = new WeakMap(), _Identity_pendingWindowRequest = new WeakMap(), _Identity_defaultTransactionSpendingLimit = new WeakMap(), _Identity_appName = new WeakMap(), _Identity_jwtAlgorithm = new WeakMap(), _Identity_defaultGroupName = new WeakMap(), _Identity_boundPostMessageListener = new WeakMap(), _Identity_subscribers = new WeakMap(), _Identity_didConfigure = new WeakMap(), _Identity_isBrowser = new WeakMap(), _Identity_identityPresenter = new WeakMap(), _Identity_storageProvider = new WeakMap(), _Identity_showSkip = new WeakMap(), _Identity_isAutoDeriveLogin = new WeakMap(), _Identity_defaultNumDaysBeforeExpiration = new WeakMap(), _Identity_instances = new WeakSet(), _Identity_getState = function _Identity_getState() {
    const users = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getUsers).call(this);
    const constructState = (users, activePublicKey) => {
        const currentUser = activePublicKey && users && (users[activePublicKey] ?? null);
        const alternateUsers = users &&
            Object.keys(users).reduce((res, publicKey) => {
                if (publicKey !== activePublicKey) {
                    res[publicKey] = users?.[publicKey];
                }
                return res;
            }, {});
        return {
            currentUser,
            alternateUsers: Object.keys(alternateUsers ?? {})?.length
                ? alternateUsers
                : null,
        };
    };
    if (typeof users?.then === 'function') {
        // we're in async mode
        return Promise.all([users, __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this)]).then((args) => constructState(...args));
    }
    else {
        // we're in sync mode
        const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this);
        return constructState(users, activePublicKey);
    }
}, _Identity_getActivePublicKey = function _Identity_getActivePublicKey() {
    if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
        throw new Error('No storage provider available.');
    }
    const activePublicKey = __classPrivateFieldGet(this, _Identity_storageProvider, "f").getItem(LOCAL_STORAGE_KEYS.activePublicKey);
    if (typeof activePublicKey === 'string' || activePublicKey === null) {
        return activePublicKey;
    }
    return activePublicKey;
}, _Identity_getUsers = function _Identity_getUsers() {
    if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
        throw new Error('No storage provider available.');
    }
    const storedUsers = __classPrivateFieldGet(this, _Identity_storageProvider, "f").getItem(LOCAL_STORAGE_KEYS.identityUsers);
    if (typeof storedUsers === 'string' || storedUsers === null) {
        return storedUsers && JSON.parse(storedUsers);
    }
    return storedUsers.then((users) => users && JSON.parse(users));
}, _Identity_getCurrentUser = function _Identity_getCurrentUser() {
    const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this);
    if (typeof activePublicKey === 'string' || activePublicKey === null) {
        if (!activePublicKey)
            return null;
        // we know we're dealing with sync storage
        const users = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getUsers).call(this);
        const currentUser = users?.[activePublicKey] ?? null;
        return currentUser;
    }
    // we assume we're dealing with async storage if we make it here
    return Promise.all([activePublicKey, __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getUsers).call(this)]).then(([publicKey, users]) => {
        if (!publicKey)
            return null;
        return users?.[publicKey] ?? null;
    });
}, _Identity_queryETHRPC = async function _Identity_queryETHRPC(params) {
    return await __classPrivateFieldGet(this, _Identity_api, "f").post(`${__classPrivateFieldGet(this, _Identity_nodeURI, "f")}/api/v0/query-eth-rpc`, params);
}, _Identity_getETHTransactionsSignedByAddress = async function _Identity_getETHTransactionsSignedByAddress(address) {
    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
        throw new Error('Invalid Ethereum address');
    }
    const resp = (await __classPrivateFieldGet(this, _Identity_api, "f").get(`${__classPrivateFieldGet(this, _Identity_nodeURI, "f")}/api/v0/get-eth-transactions-for-eth-address/${address}?eth_network=${DESO_NETWORK_TO_ETH_NETWORK[__classPrivateFieldGet(this, _Identity_network, "f")]}`));
    if (resp.status !== '1' || !resp.message.startsWith('OK')) {
        throw new Error(`Error fetching ETH transactions for address ${address}: ${resp.message}`);
    }
    return resp.result.filter((tx) => tx.from.toLowerCase() === address.toLowerCase());
}, _Identity_authorizeDerivedKey = 
/**
 * @private
 */
async function _Identity_authorizeDerivedKey(params) {
    return await __classPrivateFieldGet(this, _Identity_api, "f").post(`${__classPrivateFieldGet(this, _Identity_nodeURI, "f")}/api/v0/authorize-derived-key`, params);
}, _Identity_setActiveUser = function _Identity_setActiveUser(publicKey) {
    const users = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getUsers).call(this);
    const updateActiveKey = (users, newActivePublicKey) => {
        if (!(newActivePublicKey && users?.[newActivePublicKey])) {
            throw new Error(`No user found for public key. Stored users: ${JSON.stringify(users ?? {})}`);
        }
        if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
            throw new Error('No storage provider available. Did you forget to configure a storageProvider?');
        }
        return __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.activePublicKey, newActivePublicKey);
    };
    if (typeof users?.then === 'function') {
        return users.then((users) => updateActiveKey(users, publicKey));
    }
    else {
        return updateActiveKey(users, publicKey);
    }
}, _Identity_getErrorType = function _Identity_getErrorType(e) {
    if (e?.message?.indexOf('Total input 0 is not sufficient to cover the spend amount') >= 0) {
        return ERROR_TYPES.NO_MONEY;
    }
    return undefined;
}, _Identity_authorizePrimaryDerivedKey = 
/**
 * @private
 */
async function _Identity_authorizePrimaryDerivedKey(ownerPublicKey) {
    const state1 = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
    __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
        event: NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_START,
        ...state1,
    }));
    const users = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getUsers).call(this);
    const primaryDerivedKey = users?.[ownerPublicKey]?.primaryDerivedKey;
    if (primaryDerivedKey == null) {
        throw new Error(`No primary derived key found for user ${ownerPublicKey}`);
    }
    const trimmedAppName = __classPrivateFieldGet(this, _Identity_appName, "f").trim();
    const Memo = trimmedAppName.length > 0
        ? trimmedAppName
        : __classPrivateFieldGet(this, _Identity_window, "f").location?.hostname ?? 'unknown';
    const resp = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_authorizeDerivedKey).call(this, {
        OwnerPublicKeyBase58Check: primaryDerivedKey.publicKeyBase58Check,
        DerivedPublicKeyBase58Check: primaryDerivedKey.derivedPublicKeyBase58Check,
        ExpirationBlock: primaryDerivedKey.expirationBlock,
        AccessSignature: primaryDerivedKey.accessSignature,
        DeleteKey: false,
        DerivedKeySignature: false,
        MinFeeRateNanosPerKB: 1000,
        TransactionSpendingLimitHex: primaryDerivedKey.transactionSpendingLimitHex,
        Memo,
        AppName: __classPrivateFieldGet(this, _Identity_appName, "f"),
        TransactionFees: [],
        ExtraData: {},
    });
    const signedTx = await this.signTx(resp.TransactionHex);
    const result = await this.submitTx(signedTx);
    const state2 = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
    __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
        event: NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_END,
        ...state2,
    }));
    return result;
}, _Identity_handlePostMessage = function _Identity_handlePostMessage(ev) {
    if (ev.origin !== __classPrivateFieldGet(this, _Identity_identityURI, "f") ||
        ev.data.service !== IDENTITY_SERVICE_VALUE ||
        ev.source === null) {
        return;
    }
    if (ev.data.method === 'initialize') {
        ev.source.postMessage({
            id: ev.data.id,
            service: IDENTITY_SERVICE_VALUE,
            payload: {
                appName: __classPrivateFieldGet(this, _Identity_appName, "f"),
            },
        }, __classPrivateFieldGet(this, _Identity_identityURI, "f"));
    }
    else {
        __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_handleIdentityResponse).call(this, ev.data);
        __classPrivateFieldGet(this, _Identity_identityPopupWindow, "f")?.close();
        if (__classPrivateFieldGet(this, _Identity_boundPostMessageListener, "f") != null) {
            __classPrivateFieldGet(this, _Identity_window, "f").removeEventListener('message', __classPrivateFieldGet(this, _Identity_boundPostMessageListener, "f"));
        }
        __classPrivateFieldSet(this, _Identity_boundPostMessageListener, undefined, "f");
    }
}, _Identity_handleIdentityResponse = function _Identity_handleIdentityResponse({ method, payload = {} }) {
    switch (method) {
        case 'derive':
            __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_handleDeriveMethod).call(this, payload)
                .then(async (res) => {
                const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
                __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
                    event: __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.event ===
                        NOTIFICATION_EVENTS.LOGIN_START
                        ? NOTIFICATION_EVENTS.LOGIN_END
                        : NOTIFICATION_EVENTS.REQUEST_PERMISSIONS_END,
                    ...state,
                }));
                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.resolve(res);
            })
                .catch(async (e) => {
                // if we're in a login flow just don't let the user log in if we
                // can't authorize their derived key.  we've already stored the user
                // in local storage before attempting to authorize, so we remove
                // their data.
                const currentUser = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this);
                const showSkipAndNoMoney = (__classPrivateFieldGet(this, _Identity_showSkip, "f") || __classPrivateFieldGet(this, _Identity_isAutoDeriveLogin, "f")) &&
                    e.message.indexOf('RuleErrorInsufficientBalance') >= 0;
                if (showSkipAndNoMoney && currentUser != null) {
                    await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_updateUser).call(this, currentUser.publicKey, {
                        primaryDerivedKey: {
                            ...currentUser.primaryDerivedKey,
                            ...payload,
                            derivedKeyRegistered: false,
                        },
                    });
                    await __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.activePublicKey, currentUser.publicKey);
                }
                else if (__classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.event ===
                    NOTIFICATION_EVENTS.LOGIN_START &&
                    currentUser != null) {
                    __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_purgeUserDataForPublicKey).call(this, currentUser.publicKey);
                    if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
                        throw new Error('No storage provider available.');
                    }
                    await __classPrivateFieldGet(this, _Identity_storageProvider, "f").removeItem(LOCAL_STORAGE_KEYS.activePublicKey);
                }
                const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
                __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
                    event: NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_FAIL,
                    ...state,
                }));
                // propagate the error to the external caller
                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.reject(__classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getErrorInstance).call(this, e));
            });
            break;
        case 'login':
            __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_handleLoginMethod).call(this, payload).catch((e) => {
                // propagate any error to the external caller
                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.reject(__classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getErrorInstance).call(this, e));
            });
            break;
        default:
            throw new Error(`Unknown method: ${method}`);
    }
}, _Identity_handleLoginMethod = 
/**
 * @private
 */
async function _Identity_handleLoginMethod(payload) {
    const activePublicKey = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this);
    // NOTE: this is a bit counterintuitive, but a missing publicKeyAdded
    // identifies this as a logout (even though the method is 'login').
    if (!payload.publicKeyAdded) {
        if (!activePublicKey) {
            throw new Error('No active public key found');
        }
        if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
            throw new Error('No storage provider available.');
        }
        await __classPrivateFieldGet(this, _Identity_storageProvider, "f").removeItem(LOCAL_STORAGE_KEYS.activePublicKey);
        await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_purgeUserDataForPublicKey).call(this, activePublicKey);
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
            event: NOTIFICATION_EVENTS.LOGOUT_END,
            ...state,
        }));
        __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.resolve(payload);
    }
    else if (payload.publicKeyAdded &&
        !payload.signedUp &&
        payload.publicKeyAdded === activePublicKey) {
        let endEvent;
        const startEvent = __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.event;
        if (startEvent === NOTIFICATION_EVENTS.GET_FREE_DESO_START) {
            endEvent = NOTIFICATION_EVENTS.GET_FREE_DESO_END;
        }
        else if (startEvent === NOTIFICATION_EVENTS.VERIFY_PHONE_NUMBER_START) {
            endEvent = NOTIFICATION_EVENTS.VERIFY_PHONE_NUMBER_END;
        }
        else if (startEvent === NOTIFICATION_EVENTS.LOGIN_START) {
            endEvent = NOTIFICATION_EVENTS.LOGIN_END;
        }
        else {
            throw new Error(`unexpected identity event: ${startEvent}`);
        }
        __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_authorizePrimaryDerivedKey).call(this, payload.publicKeyAdded)
            .then(async () => {
            __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.resolve(payload);
            const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
            __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event: endEvent, ...state }));
        })
            .catch(async (e) => {
            const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
            __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({
                event: NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_FAIL,
                ...state,
            }));
            __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.reject(__classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getErrorInstance).call(this, e));
        });
        // This condition identifies the legacy non derived key login flow.
        // We default to derived key login, but the legacy flow can be enabled
        // to support simple gated content: https://github.com/deso-protocol/deso-js/issues/1
    }
    else if (payload.publicKeyAdded) {
        await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_updateUser).call(this, payload.publicKeyAdded, payload.users[payload.publicKeyAdded]);
        __classPrivateFieldGet(this, _Identity_pendingWindowRequest, "f")?.resolve(payload);
        await __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.activePublicKey, payload.publicKeyAdded);
        const state = await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getState).call(this);
        __classPrivateFieldGet(this, _Identity_subscribers, "f").forEach((s) => s({ event: NOTIFICATION_EVENTS.LOGIN_END, ...state }));
    }
    else {
        // not sure how we would get here, but lets log it just in case we haven't actually
        // handled all the cases.
        console.warn('unhandled identity login payload', payload);
    }
}, _Identity_purgeUserDataForPublicKey = 
/**
 * @private
 */
async function _Identity_purgeUserDataForPublicKey(publicKey) {
    if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
        throw new Error('No storage provider is available.');
    }
    const users = await __classPrivateFieldGet(this, _Identity_storageProvider, "f").getItem(LOCAL_STORAGE_KEYS.identityUsers);
    if (users) {
        const usersObj = JSON.parse(users);
        delete usersObj[publicKey];
        if (Object.keys(usersObj).length === 0) {
            await __classPrivateFieldGet(this, _Identity_storageProvider, "f").removeItem(LOCAL_STORAGE_KEYS.identityUsers);
        }
        else {
            await __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.identityUsers, JSON.stringify(usersObj));
        }
    }
}, _Identity_handleDeriveMethod = 
/**
 * @private
 */
async function _Identity_handleDeriveMethod(payload) {
    const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
    // NOTE: If we generated the keys and provided the derived public key,
    // identity will respond with an empty string in the derivedSeedHex field.
    // We don't want to inadvertently overwrite our derived seed hex with the
    // empty string, so we delete the field if it's empty.
    if (payload.derivedSeedHex === '') {
        delete payload.derivedSeedHex;
    }
    if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
        throw new Error('No storage provider is available.');
    }
    // we may or may not have a login key pair in localStorage. If we do, it means we
    // initiated a login flow.
    const maybeLoginKeyPair = await __classPrivateFieldGet(this, _Identity_storageProvider, "f").getItem(LOCAL_STORAGE_KEYS.loginKeyPair);
    // in the case of a login, we always clean up the login key pair from localStorage.
    await __classPrivateFieldGet(this, _Identity_storageProvider, "f").removeItem(LOCAL_STORAGE_KEYS.loginKeyPair);
    // This means we're doing a derived key permissions upgrade for the current user (not a login).
    if (primaryDerivedKey != null &&
        primaryDerivedKey.publicKeyBase58Check === payload.publicKeyBase58Check &&
        primaryDerivedKey.derivedPublicKeyBase58Check ===
            payload.derivedPublicKeyBase58Check) {
        await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {
            primaryDerivedKey: { ...primaryDerivedKey, ...payload },
        });
        return await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_authorizePrimaryDerivedKey).call(this, payload.publicKeyBase58Check).then(async () => {
            const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
            await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {
                primaryDerivedKey: {
                    ...primaryDerivedKey,
                    derivedKeyRegistered: true,
                },
            });
            return payload;
        });
    }
    const [users, activePublicKey] = await Promise.all([
        __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getUsers).call(this),
        __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getActivePublicKey).call(this),
    ]);
    // This means we're just switching to a user we already have in localStorage, we use the stored user bc they
    // may already have an authorized derived key that we can use.
    if (users?.[payload.publicKeyBase58Check] != null &&
        payload.publicKeyBase58Check !== activePublicKey) {
        await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_setActiveUser).call(this, payload.publicKeyBase58Check);
        // if the logged in user changes, we try to refresh the derived key permissions in the background
        // and just return the payload immediately.
        this.refreshDerivedKeyPermissions();
        return payload;
        // This means we're logging in a user we haven't seen yet
    }
    else if (maybeLoginKeyPair) {
        const { seedHex } = JSON.parse(maybeLoginKeyPair);
        await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {
            primaryDerivedKey: {
                ...primaryDerivedKey,
                ...payload,
                derivedSeedHex: seedHex,
            },
        });
        await __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.activePublicKey, payload.publicKeyBase58Check);
        return await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_authorizePrimaryDerivedKey).call(this, payload.publicKeyBase58Check).then(async () => {
            const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getCurrentUser).call(this)) ?? {};
            await __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {
                primaryDerivedKey: {
                    ...primaryDerivedKey,
                    derivedSeedHex: seedHex,
                    derivedKeyRegistered: true,
                },
            });
            return {
                ...payload,
                publicKeyAdded: payload.publicKeyBase58Check,
            };
        });
    }
    // For all other derive flows, we just return the payload directly.
    return payload;
}, _Identity_updateUser = 
/**
 * @private
 */
async function _Identity_updateUser(masterPublicKey, attributes = {}) {
    if (!__classPrivateFieldGet(this, _Identity_storageProvider, "f")) {
        throw new Error('No storage provider is available.');
    }
    const users = await __classPrivateFieldGet(this, _Identity_storageProvider, "f").getItem(LOCAL_STORAGE_KEYS.identityUsers);
    if (users) {
        const usersObj = JSON.parse(users);
        if (!usersObj[masterPublicKey]) {
            usersObj[masterPublicKey] = {
                publicKey: masterPublicKey,
                ...attributes,
            };
        }
        else {
            usersObj[masterPublicKey] = {
                publicKey: masterPublicKey,
                ...usersObj[masterPublicKey],
                ...attributes,
            };
        }
        await __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.identityUsers, JSON.stringify(usersObj));
    }
    else {
        await __classPrivateFieldGet(this, _Identity_storageProvider, "f").setItem(LOCAL_STORAGE_KEYS.identityUsers, JSON.stringify({
            [masterPublicKey]: { publicKey: masterPublicKey, ...attributes },
        }));
    }
}, _Identity_buildQueryParams = function _Identity_buildQueryParams(paramsPojo) {
    const qps = new URLSearchParams(Object.entries(paramsPojo).reduce((acc, [k, v]) => {
        acc[k] =
            typeof v === 'object' && v !== null
                ? encodeURIComponent(JSON.stringify(v))
                : v;
        return acc;
    }, {}));
    if (__classPrivateFieldGet(this, _Identity_network, "f") === 'testnet') {
        qps.append('testnet', 'true');
    }
    if (__classPrivateFieldGet(this, _Identity_redirectURI, "f")) {
        qps.append('redirect_uri', __classPrivateFieldGet(this, _Identity_redirectURI, "f"));
    }
    // TODO: We can remove this feature flag once this becomes the default
    // behavior in the identity service.
    qps.append('subAccounts', 'true');
    return qps;
}, _Identity_openIdentityPopup = function _Identity_openIdentityPopup(url) {
    if (__classPrivateFieldGet(this, _Identity_identityPopupWindow, "f") != null) {
        __classPrivateFieldGet(this, _Identity_identityPopupWindow, "f").close();
    }
    const h = 1000;
    const w = 800;
    const y = __classPrivateFieldGet(this, _Identity_window, "f").outerHeight / 2 + __classPrivateFieldGet(this, _Identity_window, "f").screenY - h / 2;
    const x = __classPrivateFieldGet(this, _Identity_window, "f").outerWidth / 2 + __classPrivateFieldGet(this, _Identity_window, "f").screenX - w / 2;
    __classPrivateFieldSet(this, _Identity_identityPopupWindow, __classPrivateFieldGet(this, _Identity_window, "f").open(url, undefined, `toolbar=no, width=${w}, height=${h}, top=${y}, left=${x}`), "f");
}, _Identity_launchIdentity = function _Identity_launchIdentity(path, params) {
    const qps = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_buildQueryParams).call(this, params);
    const url = `${__classPrivateFieldGet(this, _Identity_identityURI, "f")}/${path.replace(/^\//, '')}?${qps}`;
    // If we have a custom presenter, use that instead of the default browser APIs.
    // This would typically be used for mobile apps.
    if (typeof __classPrivateFieldGet(this, _Identity_identityPresenter, "f") === 'function') {
        __classPrivateFieldGet(this, _Identity_identityPresenter, "f").call(this, url);
        return;
    }
    if (typeof __classPrivateFieldGet(this, _Identity_window, "f").open !== 'function') {
        throw new Error('No identity presenter is available. Did you forget to configure a custom identityPresenter?');
    }
    if (qps.get('redirect_uri')) {
        __classPrivateFieldGet(this, _Identity_window, "f").location.href = url;
    }
    else {
        // if we had a previously attached listener, remove it and create a new one.
        if (__classPrivateFieldGet(this, _Identity_boundPostMessageListener, "f") != null) {
            __classPrivateFieldGet(this, _Identity_window, "f").removeEventListener('message', __classPrivateFieldGet(this, _Identity_boundPostMessageListener, "f"));
        }
        __classPrivateFieldSet(this, _Identity_boundPostMessageListener, __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_handlePostMessage).bind(this), "f");
        __classPrivateFieldGet(this, _Identity_window, "f").addEventListener('message', __classPrivateFieldGet(this, _Identity_boundPostMessageListener, "f"));
        __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_openIdentityPopup).call(this, url);
    }
}, _Identity_getErrorInstance = function _Identity_getErrorInstance(e) {
    const errorType = __classPrivateFieldGet(this, _Identity_instances, "m", _Identity_getErrorType).call(this, e);
    if (!errorType)
        return e;
    return new DeSoCoreError(e.message, errorType, e);
}, _Identity_decryptGroupChat = 
/**
 *
 * @private
 */
async function _Identity_decryptGroupChat(groups, message) {
    // ASSUMPTION: if it's a group chat, then the RECIPIENT has the group key name we need?
    const accessGroup = groups.find((g) => {
        return (g.AccessGroupKeyName === message.RecipientInfo.AccessGroupKeyName &&
            g.AccessGroupOwnerPublicKeyBase58Check ===
                message.RecipientInfo.OwnerPublicKeyBase58Check &&
            g.AccessGroupMemberEntryResponse);
    });
    if (!accessGroup?.AccessGroupMemberEntryResponse?.EncryptedKey) {
        throw new Error('access group key not found for group message');
    }
    const decryptedKeys = await this.decryptAccessGroupKeyPair(accessGroup.AccessGroupMemberEntryResponse.EncryptedKey);
    return await decryptChatMessage(decryptedKeys.seedHex, message.SenderInfo.AccessGroupPublicKeyBase58Check, message.MessageInfo.EncryptedText);
}, _Identity_decryptDM = 
/**
 * @private
 */
async function _Identity_decryptDM(userPublicKeyBase58Check, privateKeyHex, message, isSender) {
    const accessGroupInfo = isSender
        ? message.SenderInfo
        : message.RecipientInfo;
    if (message?.MessageInfo?.ExtraData &&
        message.MessageInfo.ExtraData.unencrypted) {
        return unencryptedHexToPlainText(message.MessageInfo.EncryptedText);
    }
    else {
        const isRecipient = message.RecipientInfo.OwnerPublicKeyBase58Check ===
            userPublicKeyBase58Check &&
            message.RecipientInfo.AccessGroupKeyName ===
                accessGroupInfo.AccessGroupKeyName;
        const publicDecryptionKey = isRecipient
            ? message.SenderInfo.AccessGroupPublicKeyBase58Check
            : message.RecipientInfo.AccessGroupPublicKeyBase58Check;
        return await decryptChatMessage(privateKeyHex, publicDecryptionKey, message.MessageInfo.EncryptedText);
    }
};
class DeSoCoreError extends Error {
    constructor(message, type, originalError = {}) {
        super(message);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.assign(this, originalError);
        this.type = type;
        this.name = 'DeSoCoreError';
    }
}
const unencryptedHexToPlainText = (hex) => {
    const bytes = ecUtils.hexToBytes(hex);
    const textDecoder = new TextDecoder();
    return textDecoder.decode(bytes);
};
//# sourceMappingURL=data:application/json;base64,