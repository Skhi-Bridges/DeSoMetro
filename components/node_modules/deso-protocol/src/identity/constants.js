export const DEFAULT_IDENTITY_URI = 'https://identity.deso.org';
export const DEFAULT_NODE_URI = 'https://blockproducer.deso.org';
export const IDENTITY_SERVICE_VALUE = 'identity';
// Error messages
export const NO_MONEY_ERROR = 'User does not have sufficient funds in their wallet to complete the transaction';
// since we issue a derived key and authorize it immediately after login the
// default permission to authorize a derived key
export const DEFAULT_PERMISSIONS = Object.freeze({
    // set the limit very low, just enough to authorize a key
    GlobalDESOLimit: 0.01 * 1e9,
    TransactionCountLimitMap: {
        AUTHORIZE_DERIVED_KEY: 1,
    },
    CreatorCoinOperationLimitMap: {},
    DAOCoinOperationLimitMap: {},
    NFTOperationLimitMap: {},
    DAOCoinLimitOrderLimitMap: {},
});
export const PUBLIC_KEY_PREFIXES = Object.freeze({
    mainnet: {
        bitcoin: [0x00],
        deso: [0xcd, 0x14, 0x0],
    },
    testnet: {
        bitcoin: [0x6f],
        deso: [0x11, 0xc2, 0x0],
    },
});
export const LOCAL_STORAGE_KEYS = Object.freeze({
    activePublicKey: 'desoActivePublicKey',
    identityUsers: 'desoIdentityUsers',
    loginKeyPair: 'desoLoginKeyPair',
});
export const DESO_NETWORK_TO_ETH_NETWORK = Object.freeze({
    mainnet: 'mainnet',
    testnet: 'goerli',
});
export const DIAMOND_LEVEL_MAP = Object.freeze({
    '1': 50000,
    '2': 500000,
    '3': 5000000,
    '4': 50000000,
    '5': 500000000,
    '6': 5000000000,
    '7': 50000000000,
    '8': 500000000000,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lkZW50aXR5L2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRywyQkFBMkIsQ0FBQztBQUNoRSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxnQ0FBZ0MsQ0FBQztBQUNqRSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxVQUFVLENBQUM7QUFFakQsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FDekIsaUZBQWlGLENBQUM7QUFFcEYsNEVBQTRFO0FBQzVFLGdEQUFnRDtBQUNoRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNaLHlEQUF5RDtJQUN6RCxlQUFlLEVBQUUsSUFBSSxHQUFHLEdBQUc7SUFDM0Isd0JBQXdCLEVBQUU7UUFDeEIscUJBQXFCLEVBQUUsQ0FBQztLQUN6QjtJQUNELDRCQUE0QixFQUFFLEVBQUU7SUFDaEMsd0JBQXdCLEVBQUUsRUFBRTtJQUM1QixvQkFBb0IsRUFBRSxFQUFFO0lBQ3hCLHlCQUF5QixFQUFFLEVBQUU7Q0FDOUIsQ0FBQyxDQUFDO0FBRUwsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMvQyxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDZixJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQztLQUN4QjtJQUNELE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztRQUNmLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDO0tBQ3hCO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QyxlQUFlLEVBQUUscUJBQXFCO0lBQ3RDLGFBQWEsRUFBRSxtQkFBbUI7SUFDbEMsWUFBWSxFQUFFLGtCQUFrQjtDQUNqQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FHcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixPQUFPLEVBQUUsU0FBUztJQUNsQixPQUFPLEVBQUUsUUFBUTtDQUNsQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzdDLEdBQUcsRUFBRSxLQUFLO0lBQ1YsR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsT0FBTztJQUNaLEdBQUcsRUFBRSxRQUFRO0lBQ2IsR0FBRyxFQUFFLFNBQVM7SUFDZCxHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxXQUFXO0lBQ2hCLEdBQUcsRUFBRSxZQUFZO0NBQ2xCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERlU29OZXR3b3JrLFxuICBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRSZXNwb25zZSxcbn0gZnJvbSAnLi4vYmFja2VuZC10eXBlcy9pbmRleC5qcyc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9JREVOVElUWV9VUkkgPSAnaHR0cHM6Ly9pZGVudGl0eS5kZXNvLm9yZyc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9OT0RFX1VSSSA9ICdodHRwczovL2Jsb2NrcHJvZHVjZXIuZGVzby5vcmcnO1xuZXhwb3J0IGNvbnN0IElERU5USVRZX1NFUlZJQ0VfVkFMVUUgPSAnaWRlbnRpdHknO1xuXG4vLyBFcnJvciBtZXNzYWdlc1xuZXhwb3J0IGNvbnN0IE5PX01PTkVZX0VSUk9SID1cbiAgJ1VzZXIgZG9lcyBub3QgaGF2ZSBzdWZmaWNpZW50IGZ1bmRzIGluIHRoZWlyIHdhbGxldCB0byBjb21wbGV0ZSB0aGUgdHJhbnNhY3Rpb24nO1xuXG4vLyBzaW5jZSB3ZSBpc3N1ZSBhIGRlcml2ZWQga2V5IGFuZCBhdXRob3JpemUgaXQgaW1tZWRpYXRlbHkgYWZ0ZXIgbG9naW4gdGhlXG4vLyBkZWZhdWx0IHBlcm1pc3Npb24gdG8gYXV0aG9yaXplIGEgZGVyaXZlZCBrZXlcbmV4cG9ydCBjb25zdCBERUZBVUxUX1BFUk1JU1NJT05TOiBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRSZXNwb25zZSA9XG4gIE9iamVjdC5mcmVlemUoe1xuICAgIC8vIHNldCB0aGUgbGltaXQgdmVyeSBsb3csIGp1c3QgZW5vdWdoIHRvIGF1dGhvcml6ZSBhIGtleVxuICAgIEdsb2JhbERFU09MaW1pdDogMC4wMSAqIDFlOSxcbiAgICBUcmFuc2FjdGlvbkNvdW50TGltaXRNYXA6IHtcbiAgICAgIEFVVEhPUklaRV9ERVJJVkVEX0tFWTogMSxcbiAgICB9LFxuICAgIENyZWF0b3JDb2luT3BlcmF0aW9uTGltaXRNYXA6IHt9LFxuICAgIERBT0NvaW5PcGVyYXRpb25MaW1pdE1hcDoge30sXG4gICAgTkZUT3BlcmF0aW9uTGltaXRNYXA6IHt9LFxuICAgIERBT0NvaW5MaW1pdE9yZGVyTGltaXRNYXA6IHt9LFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IFBVQkxJQ19LRVlfUFJFRklYRVMgPSBPYmplY3QuZnJlZXplKHtcbiAgbWFpbm5ldDoge1xuICAgIGJpdGNvaW46IFsweDAwXSxcbiAgICBkZXNvOiBbMHhjZCwgMHgxNCwgMHgwXSxcbiAgfSxcbiAgdGVzdG5ldDoge1xuICAgIGJpdGNvaW46IFsweDZmXSxcbiAgICBkZXNvOiBbMHgxMSwgMHhjMiwgMHgwXSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRV9LRVlTID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGFjdGl2ZVB1YmxpY0tleTogJ2Rlc29BY3RpdmVQdWJsaWNLZXknLFxuICBpZGVudGl0eVVzZXJzOiAnZGVzb0lkZW50aXR5VXNlcnMnLFxuICBsb2dpbktleVBhaXI6ICdkZXNvTG9naW5LZXlQYWlyJyxcbn0pO1xuXG5leHBvcnQgY29uc3QgREVTT19ORVRXT1JLX1RPX0VUSF9ORVRXT1JLOiBSZWNvcmQ8XG4gIERlU29OZXR3b3JrLFxuICAnbWFpbm5ldCcgfCAnZ29lcmxpJ1xuPiA9IE9iamVjdC5mcmVlemUoe1xuICBtYWlubmV0OiAnbWFpbm5ldCcsXG4gIHRlc3RuZXQ6ICdnb2VybGknLFxufSk7XG5cbmV4cG9ydCBjb25zdCBESUFNT05EX0xFVkVMX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAnMSc6IDUwMDAwLFxuICAnMic6IDUwMDAwMCxcbiAgJzMnOiA1MDAwMDAwLFxuICAnNCc6IDUwMDAwMDAwLFxuICAnNSc6IDUwMDAwMDAwMCxcbiAgJzYnOiA1MDAwMDAwMDAwLFxuICAnNyc6IDUwMDAwMDAwMDAwLFxuICAnOCc6IDUwMDAwMDAwMDAwMCxcbn0pO1xuIl19