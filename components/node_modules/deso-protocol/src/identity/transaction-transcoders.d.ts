import { MsgDeSoTxn } from '../backend-types/index.js';
import { BinaryRecord } from './transcoders.js';
export declare class TransactionInput extends BinaryRecord {
    id: Uint8Array;
    index: number;
}
export declare class TransactionOutput extends BinaryRecord {
    publicKey: Uint8Array;
    amountNanos: number;
}
export declare class TransactionNonce extends BinaryRecord {
    expirationBlockHeight: number;
    partialId: number;
}
export declare class TransactionExtraDataKV extends BinaryRecord {
    key: Uint8Array;
    value: Uint8Array;
    constructor(key?: Uint8Array, value?: Uint8Array);
}
export declare class TransactionExtraData extends BinaryRecord {
    kvs: TransactionExtraDataKV[];
}
export declare abstract class TransactionMetadataRecord extends BinaryRecord {
}
export declare class TransactionMetadataBlockReward extends TransactionMetadataRecord {
    extraData: Uint8Array;
}
export declare class TransactionMetadataBasicTransfer extends TransactionMetadataRecord {
}
export declare class TransactionMetadataBitcoinExchange extends TransactionMetadataRecord {
    transaction: Uint8Array;
    blockHash: Uint8Array;
    merkleRoot: Uint8Array;
    merkleProof: Uint8Array[];
}
export declare class TransactionMetadataPrivateMessage extends TransactionMetadataRecord {
    recipientPublicKey: Uint8Array;
    encryptedText: Uint8Array;
    timestampNanos: number;
}
export declare class TransactionMetadataSubmitPost extends TransactionMetadataRecord {
    postHashToModify: Uint8Array;
    parentStakeId: Uint8Array;
    body: Uint8Array;
    creatorBasisPoints: number;
    stakeMultipleBasisPoints: number;
    timestampNanos: number;
    isHidden: boolean;
}
export declare class TransactionMetadataUpdateProfile extends TransactionMetadataRecord {
    profilePublicKey: Uint8Array;
    newUsername: Uint8Array;
    newDescription: Uint8Array;
    newProfilePic: Uint8Array;
    newCreatorBasisPoints: number;
    newStakeMultipleBasisPoints: number;
    isHidden: boolean;
}
export declare class TransactionMetadataUpdateBitcoinUSDExchangeRate extends TransactionMetadataRecord {
    usdCentsPerBitcoin: number;
}
export declare class TransactionMetadataFollow extends TransactionMetadataRecord {
    followedPublicKey: Uint8Array;
    isUnfollow: boolean;
}
export declare class TransactionMetadataLike extends TransactionMetadataRecord {
    likedPostHash: Uint8Array;
    isUnlike: boolean;
}
export declare class TransactionMetadataCreatorCoin extends TransactionMetadataRecord {
    profilePublicKey: Uint8Array;
    operationType: number;
    desoToSellNanos: number;
    creatorCoinToSellNanos: number;
    desoToAddNanos: number;
    minDeSoExpectedNanos: number;
    minCreatorCoinExpectedNanos: number;
}
export declare class TransactionMetadataSwapIdentity extends TransactionMetadataRecord {
    fromPublicKey: Uint8Array;
    toPublicKey: Uint8Array;
}
export declare class TransactionMetadataUpdateGlobalParams extends TransactionMetadataRecord {
}
export declare class TransactionMetadataCreatorCoinTransfer extends TransactionMetadataRecord {
    profilePublicKey: Uint8Array;
    creatorCoinToTransferNanos: number;
    receiverPublicKey: Uint8Array;
}
export declare class TransactionMetadataCreateNFT extends TransactionMetadataRecord {
    nftPostHash: Uint8Array;
    numCopies: number;
    hasUnlockable: boolean;
    isForSale: boolean;
    minBidAmountNanos: number;
    nftRoyaltyToCreatorBasisPoints: number;
    nftRoyaltyToCoinBasisPoints: number;
}
export declare class TransactionMetadataUpdateNFT extends TransactionMetadataRecord {
    nftPostHash: Uint8Array;
    serialNumber: number;
    isForSale: boolean;
    minBidAmountNanos: number;
}
export declare class TransactionMetadataAcceptNFTBid extends TransactionMetadataRecord {
    nftPostHash: Uint8Array;
    serialNumber: number;
    bidderPKID: Uint8Array;
    bidAmountNanos: number;
    encryptedUnlockableText: Uint8Array;
    bidderInputs: TransactionInput[];
}
export declare class TransactionMetadataNFTBid extends TransactionMetadataRecord {
    nftPostHash: Uint8Array;
    serialNumber: number;
    bidAmountNanos: number;
}
export declare class TransactionMetadataNFTTransfer extends TransactionMetadataRecord {
    nftPostHash: Uint8Array;
    serialNumber: number;
    receiverPublicKey: Uint8Array;
    encryptedUnlockableText: Uint8Array;
}
export declare class TransactionMetadataAcceptNFTTransfer extends TransactionMetadataRecord {
    nftPostHash: Uint8Array;
    serialNumber: number;
}
export declare class TransactionMetadataBurnNFT extends TransactionMetadataRecord {
    nftPostHash: Uint8Array;
    serialNumber: number;
}
export declare class TransactionMetadataAuthorizeDerivedKey extends TransactionMetadataRecord {
    derivedPublicKey: Uint8Array;
    expirationBlock: number;
    operationType: number;
    accessSignature: Uint8Array;
}
export declare class MessagingGroupMemberRecord extends BinaryRecord {
    groupMemberPublicKey: Uint8Array;
    groupMemberKeyName: Uint8Array;
    encryptedKey: Uint8Array;
}
export declare class TransactionMetadataMessagingGroup extends BinaryRecord {
    messagingPublicKey: Uint8Array;
    messagingGroupKeyName: Uint8Array;
    groupOwnerSignature: Uint8Array;
    MessagingGroupMemberRecords: MessagingGroupMemberRecord[];
}
export declare class TransactionMetadataDAOCoin extends TransactionMetadataRecord {
    profilePublicKey: Uint8Array;
    operationType: number;
    coinsToMintNanos: Uint8Array;
    coinsToBurnNanos: Uint8Array;
    transferRestrictionStatus: number;
}
export declare class TransactionMetadataTransferDAOCoin extends TransactionMetadataRecord {
    profilePublicKey: Uint8Array;
    daoCoinToTransferNanos: Uint8Array;
    receiverPublicKey: Uint8Array;
}
export declare class TransactionCountLimitMapItem extends BinaryRecord {
    txnType: number;
    value: number;
}
export declare class TransactionCountLimitMap extends BinaryRecord {
    txnCountLimitMap: TransactionCountLimitMapItem[];
}
export declare class TransactionCoinOperationLimitMapItem extends BinaryRecord {
    creatorPKID: Uint8Array;
    operation: number;
    value: number;
}
export declare class TransactionCoinOperationLimitMap extends BinaryRecord {
    coinOperationLimitMap: TransactionCoinOperationLimitMap[];
}
export declare class TransactionNFTOperationLimitMapItem extends BinaryRecord {
    postHash: Uint8Array;
    serialNumber: number;
    operation: number;
    value: number;
}
export declare class TransactionNFTOperationLimitMap extends BinaryRecord {
    coinOperationLimitMap: TransactionNFTOperationLimitMap[];
}
export declare class TransactionDAOCoinLimitOrderLimitMapItem extends BinaryRecord {
    buyingDAOCoinCreatorPKID: Uint8Array;
    sellingDAOCoinCreatorPKID: Uint8Array;
    value: number;
}
export declare class TransactionSpendingLimitRecord extends BinaryRecord {
    globalDESOLimit: number;
    txnCountLimitMap: TransactionCountLimitMapItem[];
    creatorCoinOperationLimitMap: TransactionCoinOperationLimitMapItem[];
    daoCoinOperationLimitMap: TransactionCoinOperationLimitMapItem[];
    nftOperationLimitMap: TransactionNFTOperationLimitMapItem[];
    daoCoinLimitOrderLimitMap: TransactionDAOCoinLimitOrderLimitMapItem[];
}
export declare class DeSoInputsByTransactorRecord extends BinaryRecord {
    transactorPublicKey: Uint8Array;
    inputs: TransactionInput[];
}
export declare class TransactionMetadataDAOCoinLimitOrder extends BinaryRecord {
    buyingDAOCoinCreatorPublicKey: Uint8Array;
    sellingDAOCoinCreatorPublicKey: Uint8Array;
    scaledExchangeRateCoinsToSellPerCoinToBuy: Uint8Array;
    quantityToFillInBaseUnits: Uint8Array;
    operationType: number;
    fillType: number;
    cancelOrderID: Uint8Array;
    bidderInputs: DeSoInputsByTransactorRecord[];
}
export declare class TransactionMetadataCreateUserAssociation extends BinaryRecord {
    targetUserPublicKey: Uint8Array;
    appPublicKey: Uint8Array;
    associationType: Uint8Array;
    associationValue: Uint8Array;
}
export declare class TransactionMetadataDeleteUserAssociation extends BinaryRecord {
    associationID: Uint8Array;
}
export declare class TransactionMetadataCreatePostAssociation extends BinaryRecord {
    postHash: Uint8Array;
    appPublicKey: Uint8Array;
    associationType: Uint8Array;
    associationValue: Uint8Array;
}
export declare class TransactionMetadataDeletePostAssociation extends BinaryRecord {
    associationID: Uint8Array;
}
export declare class TransactionMetadataAccessGroup extends BinaryRecord {
    accessGroupOwnerPublicKey: Uint8Array;
    accessGroupPublicKey: Uint8Array;
    accessGroupKeyName: Uint8Array;
    accessGroupOperationType: number;
}
export declare class AccessGroupMemberRecord extends BinaryRecord {
    accessGroupMemberPublicKey: Uint8Array;
    accessGroupMemberKeyName: Uint8Array;
    encryptedKey: Uint8Array;
    extraData: TransactionExtraData | null;
}
export declare class TransactionMetadataAccessGroupMembers extends BinaryRecord {
    accessGroupOwnerPublicKey: Uint8Array;
    accessGroupKeyName: Uint8Array;
    accessGroupMembersList: AccessGroupMemberRecord[];
    accessGroupMemberOperationType: number;
}
export declare class TransactionMetadataNewMessage extends BinaryRecord {
    senderAccessGroupOwnerPublicKey: Uint8Array;
    senderAccessGroupKeyName: Uint8Array;
    senderAccessGroupPublicKey: Uint8Array;
    recipientAccessGroupOwnerPublicKey: Uint8Array;
    recipientAccessGroupKeyname: Uint8Array;
    recipientAccessGroupPublicKey: Uint8Array;
    encryptedText: Uint8Array;
    timestampNanos: number;
    newMessageType: number;
    newMessageOperation: number;
}
export declare const TransactionTypeMetadataMap: {
    1: typeof TransactionMetadataBlockReward;
    2: typeof TransactionMetadataBasicTransfer;
    3: typeof TransactionMetadataBitcoinExchange;
    4: typeof TransactionMetadataPrivateMessage;
    5: typeof TransactionMetadataSubmitPost;
    6: typeof TransactionMetadataUpdateProfile;
    8: typeof TransactionMetadataUpdateBitcoinUSDExchangeRate;
    9: typeof TransactionMetadataFollow;
    10: typeof TransactionMetadataLike;
    11: typeof TransactionMetadataCreatorCoin;
    12: typeof TransactionMetadataSwapIdentity;
    13: typeof TransactionMetadataUpdateGlobalParams;
    14: typeof TransactionMetadataCreatorCoinTransfer;
    15: typeof TransactionMetadataCreateNFT;
    16: typeof TransactionMetadataUpdateNFT;
    17: typeof TransactionMetadataAcceptNFTBid;
    18: typeof TransactionMetadataNFTBid;
    19: typeof TransactionMetadataNFTTransfer;
    20: typeof TransactionMetadataAcceptNFTTransfer;
    21: typeof TransactionMetadataBurnNFT;
    22: typeof TransactionMetadataAuthorizeDerivedKey;
    23: typeof TransactionMetadataMessagingGroup;
    24: typeof TransactionMetadataDAOCoin;
    25: typeof TransactionMetadataTransferDAOCoin;
    26: typeof TransactionMetadataDAOCoinLimitOrder;
    27: typeof TransactionMetadataCreateUserAssociation;
    28: typeof TransactionMetadataDeleteUserAssociation;
    29: typeof TransactionMetadataCreatePostAssociation;
    30: typeof TransactionMetadataDeletePostAssociation;
    31: typeof TransactionMetadataAccessGroup;
    32: typeof TransactionMetadataAccessGroupMembers;
    33: typeof TransactionMetadataNewMessage;
};
export declare const TransactionTypeToStringMap: {
    [k: number]: string;
};
export declare class Transaction extends BinaryRecord {
    inputs: TransactionInput[];
    outputs: TransactionOutput[];
    metadata: TransactionMetadataRecord | null;
    publicKey: Uint8Array;
    extraData: TransactionExtraData | null;
    signature: Uint8Array | null;
    version: number;
    feeNanos: number;
    nonce: TransactionNonce | null;
    constructor(attributes: {
        [k: string]: any;
    });
    getTxnType(): number;
    getTxnTypeString(): string;
}
export declare const TransactionToMsgDeSoTxn: (txn: Transaction) => MsgDeSoTxn;
export declare class TransactionV0 extends BinaryRecord {
    inputs: TransactionInput[];
    outputs: TransactionOutput[];
    metadata: TransactionMetadataRecord | null;
    publicKey: Uint8Array;
    extraData: TransactionExtraData | null;
    signature: Uint8Array | null;
}
