export var DeSoNetwork;
(function (DeSoNetwork) {
    DeSoNetwork["mainnet"] = "mainnet";
    DeSoNetwork["testnet"] = "testnet";
})(DeSoNetwork || (DeSoNetwork = {}));
export var CreatorCoinLimitOperationString;
(function (CreatorCoinLimitOperationString) {
    CreatorCoinLimitOperationString["ANY"] = "any";
    CreatorCoinLimitOperationString["BUY"] = "buy";
    CreatorCoinLimitOperationString["SELL"] = "sell";
    CreatorCoinLimitOperationString["TRANSFER"] = "transfer";
})(CreatorCoinLimitOperationString || (CreatorCoinLimitOperationString = {}));
export var DAOCoinLimitOperationString;
(function (DAOCoinLimitOperationString) {
    DAOCoinLimitOperationString["ANY"] = "any";
    DAOCoinLimitOperationString["MINT"] = "mint";
    DAOCoinLimitOperationString["BURN"] = "burn";
    DAOCoinLimitOperationString["DISABLE_MINTING"] = "disable_minting";
    DAOCoinLimitOperationString["UPDATE_TRANSFER_RESTRICTION_STATUS"] = "update_transfer_restriction_status";
    DAOCoinLimitOperationString["TRANSFER"] = "transfer";
})(DAOCoinLimitOperationString || (DAOCoinLimitOperationString = {}));
export var NFTLimitOperationString;
(function (NFTLimitOperationString) {
    NFTLimitOperationString["ANY"] = "any";
    NFTLimitOperationString["UPDATE"] = "update";
    NFTLimitOperationString["BID"] = "nft_bid";
    NFTLimitOperationString["ACCEPT_BID"] = "accept_nft_bid";
    NFTLimitOperationString["TRANSFER"] = "transfer";
    NFTLimitOperationString["BURN"] = "burn";
    NFTLimitOperationString["ACCEPT_TRANSFER"] = "accept_nft_transfer";
})(NFTLimitOperationString || (NFTLimitOperationString = {}));
export var TransactionType;
(function (TransactionType) {
    TransactionType["BasicTransfer"] = "BASIC_TRANSFER";
    TransactionType["BitcoinExchange"] = "BITCOIN_EXCHANGE";
    TransactionType["PrivateMessage"] = "PRIVATE_MESSAGE";
    TransactionType["SubmitPost"] = "SUBMIT_POST";
    TransactionType["UpdateProfile"] = "UPDATE_PROFILE";
    TransactionType["UpdateBitcoinUSDExchangeRate"] = "UPDATE_BITCOIN_USD_EXCHANGE_RATE";
    TransactionType["Follow"] = "FOLLOW";
    TransactionType["Like"] = "LIKE";
    TransactionType["CreatorCoin"] = "CREATOR_COIN";
    TransactionType["SwapIdentity"] = "SWAP_IDENTITY";
    TransactionType["UpdateGlobalParams"] = "UPDATE_GLOBAL_PARAMS";
    TransactionType["CreatorCoinTransfer"] = "CREATOR_COIN_TRANSFER";
    TransactionType["CreateNFT"] = "CREATE_NFT";
    TransactionType["UpdateNFT"] = "UPDATE_NFT";
    TransactionType["AcceptNFTBid"] = "ACCEPT_NFT_BID";
    TransactionType["NFTBid"] = "NFT_BID";
    TransactionType["NFTTransfer"] = "NFT_TRANSFER";
    TransactionType["AcceptNFTTransfer"] = "ACCEPT_NFT_TRANSFER";
    TransactionType["BurnNFT"] = "BURN_NFT";
    TransactionType["AuthorizeDerivedKey"] = "AUTHORIZE_DERIVED_KEY";
    TransactionType["MessagingGroup"] = "MESSAGING_GROUP";
    TransactionType["DAOCoin"] = "DAO_COIN";
    TransactionType["DAOCoinTransfer"] = "DAO_COIN_TRANSFER";
    TransactionType["DAOCoinLimitOrder"] = "DAO_COIN_LIMIT_ORDER";
    TransactionType["CreateUserAssociation"] = "CREATE_USER_ASSOCIATION";
    TransactionType["DeleteUserAssociation"] = "DELETE_USER_ASSOCIATION";
    TransactionType["CreatePostAssociation"] = "CREATE_POST_ASSOCIATION";
    TransactionType["DeletePostAssociation"] = "DELETE_POST_ASSOCIATION";
    TransactionType["AccessGroup"] = "ACCESS_GROUP";
    TransactionType["AccessGroupMembers"] = "ACCESS_GROUP_MEMBERS";
    TransactionType["NewMessage"] = "NEW_MESSAGE";
})(TransactionType || (TransactionType = {}));
// Temporary manual creation of classes for DAO coin limit orders
export var DAOCoinLimitOrderOperationTypeString;
(function (DAOCoinLimitOrderOperationTypeString) {
    DAOCoinLimitOrderOperationTypeString["DAOCoinLimitOrderOperationTypeStringASK"] = "ASK";
    DAOCoinLimitOrderOperationTypeString["DAOCoinLimitOrderOperationTypeStringBID"] = "BID";
})(DAOCoinLimitOrderOperationTypeString || (DAOCoinLimitOrderOperationTypeString = {}));
export var MessagingGroupOperation;
(function (MessagingGroupOperation) {
    MessagingGroupOperation["DEFAULT_KEY"] = "DefaultKey";
    MessagingGroupOperation["CREATE_GROUP"] = "CreateGroup";
    MessagingGroupOperation["ADD_MEMBERS"] = "AddMembers";
})(MessagingGroupOperation || (MessagingGroupOperation = {}));
//# sourceMappingURL=data:application/json;base64,